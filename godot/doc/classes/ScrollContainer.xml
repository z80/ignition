<?xml version="1.0" encoding="UTF-8" ?>
<class name="ScrollContainer" inherits="Container" category="Core" version="3.1.1">
	<brief_description>
		A helper node for displaying scrollable elements (e.g. lists).
	</brief_description>
	<description>
		A ScrollContainer node meant to contain a [Control] child. ScrollContainers will automatically create a scrollbar child ([HScrollBar], [VScrollBar], or both) when needed and will only draw the Control within the ScrollContainer area. Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer. Scrollbars will also automatically resize the grabber based on the minimum_size of the Control relative to the ScrollContainer. Works great with a [Panel] control. You can set EXPAND on children size flags, so they will upscale to ScrollContainer size if ScrollContainer size is bigger (scroll is invisible for chosen dimension).
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_h_scrollbar">
			<return type="HScrollBar">
			</return>
			<description>
			</description>
		</method>
		<method name="get_v_scrollbar">
			<return type="VScrollBar">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="scroll_deadzone" type="int" setter="set_deadzone" getter="get_deadzone">
		</member>
		<member name="scroll_horizontal" type="int" setter="set_h_scroll" getter="get_h_scroll">
			The current horizontal scroll value.
		</member>
		<member name="scroll_horizontal_enabled" type="bool" setter="set_enable_h_scroll" getter="is_h_scroll_enabled">
			If [code]true[/code], enables horizontal scrolling.
		</member>
		<member name="scroll_vertical" type="int" setter="set_v_scroll" getter="get_v_scroll">
			The current vertical scroll value.
		</member>
		<member name="scroll_vertical_enabled" type="bool" setter="set_enable_v_scroll" getter="is_v_scroll_enabled">
			If [code]true[/code], enables vertical scrolling.
		</member>
	</members>
	<signals>
		<signal name="scroll_ended">
			<description>
				Emitted whenever scrolling stops.
			</description>
		</signal>
		<signal name="scroll_started">
			<description>
				Emitted whenever scrolling is started.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
	<theme_items>
		<theme_item name="bg" type="StyleBox">
		</theme_item>
	</theme_items>
</class>
