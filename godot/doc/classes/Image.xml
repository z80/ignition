<?xml version="1.0" encoding="UTF-8" ?>
<class name="Image" inherits="Resource" category="Core" version="3.1.1">
	<brief_description>
		Image datatype.
	</brief_description>
	<description>
		Native image datatype. Contains image data, which can be converted to a [Texture], and several functions to interact with it. The maximum width and height for an [code]Image[/code] are [constant MAX_WIDTH] and [constant MAX_HEIGHT].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="blend_rect">
			<return type="void">
			</return>
			<argument index="0" name="src" type="Image">
			</argument>
			<argument index="1" name="src_rect" type="Rect2">
			</argument>
			<argument index="2" name="dst" type="Vector2">
			</argument>
			<description>
				Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dest[/code].
			</description>
		</method>
		<method name="blend_rect_mask">
			<return type="void">
			</return>
			<argument index="0" name="src" type="Image">
			</argument>
			<argument index="1" name="mask" type="Image">
			</argument>
			<argument index="2" name="src_rect" type="Rect2">
			</argument>
			<argument index="3" name="dst" type="Vector2">
			</argument>
			<description>
				Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image using [code]mask[/code] image at coordinates [code]dst[/code]. Alpha channels are required for both [code]src[/code] and [code]mask[/code]. [code]dst[/code] pixels and [code]src[/code] pixels will blend if the corresponding mask pixel's alpha value is not 0. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats.
			</description>
		</method>
		<method name="blit_rect">
			<return type="void">
			</return>
			<argument index="0" name="src" type="Image">
			</argument>
			<argument index="1" name="src_rect" type="Rect2">
			</argument>
			<argument index="2" name="dst" type="Vector2">
			</argument>
			<description>
				Copies [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dst[/code].
			</description>
		</method>
		<method name="blit_rect_mask">
			<return type="void">
			</return>
			<argument index="0" name="src" type="Image">
			</argument>
			<argument index="1" name="mask" type="Image">
			</argument>
			<argument index="2" name="src_rect" type="Rect2">
			</argument>
			<argument index="3" name="dst" type="Vector2">
			</argument>
			<description>
				Blits [code]src_rect[/code] area from [code]src[/code] image to this image at the coordinates given by [code]dst[/code]. [code]src[/code] pixel is copied onto [code]dst[/code] if the corresponding [code]mask[/code] pixel's alpha value is not 0. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats.
			</description>
		</method>
		<method name="bumpmap_to_normalmap">
			<return type="void">
			</return>
			<argument index="0" name="bump_scale" type="float" default="1.0">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_mipmaps">
			<return type="void">
			</return>
			<description>
				Removes the image's mipmaps.
			</description>
		</method>
		<method name="compress">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="mode" type="int" enum="Image.CompressMode">
			</argument>
			<argument index="1" name="source" type="int" enum="Image.CompressSource">
			</argument>
			<argument index="2" name="lossy_quality" type="float">
			</argument>
			<description>
				Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. See [code]COMPRESS_*[/code] constants.
			</description>
		</method>
		<method name="convert">
			<return type="void">
			</return>
			<argument index="0" name="format" type="int" enum="Image.Format">
			</argument>
			<description>
				Converts the image's format. See [code]FORMAT_*[/code] constants.
			</description>
		</method>
		<method name="copy_from">
			<return type="void">
			</return>
			<argument index="0" name="src" type="Image">
			</argument>
			<description>
				Copies [code]src[/code] image to this image.
			</description>
		</method>
		<method name="create">
			<return type="void">
			</return>
			<argument index="0" name="width" type="int">
			</argument>
			<argument index="1" name="height" type="int">
			</argument>
			<argument index="2" name="use_mipmaps" type="bool">
			</argument>
			<argument index="3" name="format" type="int" enum="Image.Format">
			</argument>
			<description>
				Creates an empty image of given size and format. See [code]FORMAT_*[/code] constants. If [code]use_mipmaps[/code] is true then generate mipmaps for this image. See the [code]generate_mipmaps[/code] method.
			</description>
		</method>
		<method name="create_from_data">
			<return type="void">
			</return>
			<argument index="0" name="width" type="int">
			</argument>
			<argument index="1" name="height" type="int">
			</argument>
			<argument index="2" name="use_mipmaps" type="bool">
			</argument>
			<argument index="3" name="format" type="int" enum="Image.Format">
			</argument>
			<argument index="4" name="data" type="PoolByteArray">
			</argument>
			<description>
				Creates a new image of given size and format. See [code]FORMAT_*[/code] constants. Fills the image with the given raw data. If [code]use_mipmaps[/code] is true then generate mipmaps for this image. See the [code]generate_mipmaps[/code] method.
			</description>
		</method>
		<method name="crop">
			<return type="void">
			</return>
			<argument index="0" name="width" type="int">
			</argument>
			<argument index="1" name="height" type="int">
			</argument>
			<description>
				Crops the image to the given [code]width[/code] and [code]height[/code]. If the specified size is larger than the current size, the extra area is filled with black pixels.
			</description>
		</method>
		<method name="decompress">
			<return type="int" enum="Error">
			</return>
			<description>
				Decompresses the image if it is compressed. Returns an error if decompress function is not available.
			</description>
		</method>
		<method name="detect_alpha" qualifiers="const">
			<return type="int" enum="Image.AlphaMode">
			</return>
			<description>
				Returns ALPHA_BLEND if the image has data for alpha values. Returns ALPHA_BIT if all the alpha values are below a certain threshold or the maximum value. Returns ALPHA_NONE if no data for alpha values is found.
			</description>
		</method>
		<method name="expand_x2_hq2x">
			<return type="void">
			</return>
			<description>
				Stretches the image and enlarges it by a factor of 2. No interpolation is done.
			</description>
		</method>
		<method name="fill">
			<return type="void">
			</return>
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
				Fills the image with a given [Color].
			</description>
		</method>
		<method name="fix_alpha_edges">
			<return type="void">
			</return>
			<description>
				Blends low-alpha pixels with nearby pixels.
			</description>
		</method>
		<method name="flip_x">
			<return type="void">
			</return>
			<description>
				Flips the image horizontally.
			</description>
		</method>
		<method name="flip_y">
			<return type="void">
			</return>
			<description>
				Flips the image vertically.
			</description>
		</method>
		<method name="generate_mipmaps">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="renormalize" type="bool" default="false">
			</argument>
			<description>
				Generates mipmaps for the image. Mipmaps are pre-calculated and lower resolution copies of the image. Mipmaps are automatically used if the image needs to be scaled down when rendered. This improves image quality and the performance of the rendering. Returns an error if the image is compressed, in a custom format or if the image's width/height is 0.
			</description>
		</method>
		<method name="get_data" qualifiers="const">
			<return type="PoolByteArray">
			</return>
			<description>
				Returns the image's raw data.
			</description>
		</method>
		<method name="get_format" qualifiers="const">
			<return type="int" enum="Image.Format">
			</return>
			<description>
				Returns the image's format. See [code]FORMAT_*[/code] constants.
			</description>
		</method>
		<method name="get_height" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the image's height.
			</description>
		</method>
		<method name="get_mipmap_offset" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="mipmap" type="int">
			</argument>
			<description>
				Returns the offset where the image's mipmap with index [code]mipmap[/code] is stored in the [code]data[/code] dictionary.
			</description>
		</method>
		<method name="get_pixel" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<description>
				Returns the color of the pixel at [code](x, y)[/code] if the image is locked. If the image is unlocked it always returns a [Color] with the value [code](0, 0, 0, 1.0)[/code].
			</description>
		</method>
		<method name="get_pixelv" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="src" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_rect" qualifiers="const">
			<return type="Image">
			</return>
			<argument index="0" name="rect" type="Rect2">
			</argument>
			<description>
				Returns a new image that is a copy of the image's area specified with [code]rect[/code].
			</description>
		</method>
		<method name="get_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Returns the image's size (width and height).
			</description>
		</method>
		<method name="get_used_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
				Returns a [Rect2] enclosing the visible portion of the image.
			</description>
		</method>
		<method name="get_width" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the image's width.
			</description>
		</method>
		<method name="has_mipmaps" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the image has generated mipmaps.
			</description>
		</method>
		<method name="is_compressed" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the image is compressed.
			</description>
		</method>
		<method name="is_empty" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the image has no data.
			</description>
		</method>
		<method name="is_invisible" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if all the image's pixels have an alpha value of 0. Returns [code]false[/code] if any pixel has an alpha value higher than 0.
			</description>
		</method>
		<method name="load">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
				Loads an image from file [code]path[/code].
			</description>
		</method>
		<method name="load_jpg_from_buffer">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="buffer" type="PoolByteArray">
			</argument>
			<description>
				Loads an image from the binary contents of a JPEG file.
			</description>
		</method>
		<method name="load_png_from_buffer">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="buffer" type="PoolByteArray">
			</argument>
			<description>
				Loads an image from the binary contents of a PNG file.
			</description>
		</method>
		<method name="load_webp_from_buffer">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="buffer" type="PoolByteArray">
			</argument>
			<description>
				Loads an image from the binary contents of a WebP file.
			</description>
		</method>
		<method name="lock">
			<return type="void">
			</return>
			<description>
				Locks the data for writing access.
			</description>
		</method>
		<method name="normalmap_to_xy">
			<return type="void">
			</return>
			<description>
				Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normalmap. A normalmap can add lots of detail to a 3D surface without increasing the polygon count.
			</description>
		</method>
		<method name="premultiply_alpha">
			<return type="void">
			</return>
			<description>
				Multiplies color values with alpha values. Resulting color values for a pixel are [code](color * alpha)/256[/code].
			</description>
		</method>
		<method name="resize">
			<return type="void">
			</return>
			<argument index="0" name="width" type="int">
			</argument>
			<argument index="1" name="height" type="int">
			</argument>
			<argument index="2" name="interpolation" type="int" enum="Image.Interpolation" default="1">
			</argument>
			<description>
				Resizes the image to the given [code]width[/code] and [code]height[/code]. New pixels are calculated using [code]interpolation[/code]. See [code]interpolation[/code] constants.
			</description>
		</method>
		<method name="resize_to_po2">
			<return type="void">
			</return>
			<argument index="0" name="square" type="bool" default="false">
			</argument>
			<description>
				Resizes the image to the nearest power of 2 for the width and height. If [code]square[/code] is [code]true[/code] then set width and height to be the same.
			</description>
		</method>
		<method name="rgbe_to_srgb">
			<return type="Image">
			</return>
			<description>
			</description>
		</method>
		<method name="save_png" qualifiers="const">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
				Saves the image as a PNG file to [code]path[/code].
			</description>
		</method>
		<method name="set_pixel">
			<return type="void">
			</return>
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<argument index="2" name="color" type="Color">
			</argument>
			<description>
				Sets the [Color] of the pixel at [code](x, y)[/code] if the image is locked. Example:
				[codeblock]
				var img = Image.new()
				img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
				img.lock()
				img.set_pixel(x, y, color) # Works
				img.unlock()
				img.set_pixel(x, y, color) # Does not have an effect
				[/codeblock]
			</description>
		</method>
		<method name="set_pixelv">
			<return type="void">
			</return>
			<argument index="0" name="dst" type="Vector2">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="shrink_x2">
			<return type="void">
			</return>
			<description>
				Shrinks the image by a factor of 2.
			</description>
		</method>
		<method name="srgb_to_linear">
			<return type="void">
			</return>
			<description>
				Converts the raw data from the sRGB colorspace to a linear scale.
			</description>
		</method>
		<method name="unlock">
			<return type="void">
			</return>
			<description>
				Unlocks the data and prevents changes.
			</description>
		</method>
	</methods>
	<members>
		<member name="data" type="Dictionary" setter="_set_data" getter="_get_data">
			Holds all of the image's color data in a given format. See [code]FORMAT_*[/code] constants.
		</member>
	</members>
	<constants>
		<constant name="MAX_WIDTH" value="16384">
			The maximal width allowed for [code]Image[/code] resources.
		</constant>
		<constant name="MAX_HEIGHT" value="16384">
			The maximal height allowed for [code]Image[/code] resources.
		</constant>
		<constant name="FORMAT_L8" value="0" enum="Format">
		</constant>
		<constant name="FORMAT_LA8" value="1" enum="Format">
		</constant>
		<constant name="FORMAT_R8" value="2" enum="Format">
			OpenGL texture format RED with a single component and a bitdepth of 8.
		</constant>
		<constant name="FORMAT_RG8" value="3" enum="Format">
			OpenGL texture format RG with two components and a bitdepth of 8 for each.
		</constant>
		<constant name="FORMAT_RGB8" value="4" enum="Format">
			OpenGL texture format RGB with three components, each with a bitdepth of 8. Note that when creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_RGBA8" value="5" enum="Format">
			OpenGL texture format RGBA with four components, each with a bitdepth of 8. Note that when creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_RGBA4444" value="6" enum="Format">
			OpenGL texture format RGBA with four components, each with a bitdepth of 4.
		</constant>
		<constant name="FORMAT_RGBA5551" value="7" enum="Format">
			OpenGL texture format GL_RGB5_A1 where 5 bits of depth for each component of RGB and one bit for alpha.
		</constant>
		<constant name="FORMAT_RF" value="8" enum="Format">
			OpenGL texture format GL_R32F where there's one component, a 32-bit floating-point value.
		</constant>
		<constant name="FORMAT_RGF" value="9" enum="Format">
			OpenGL texture format GL_RG32F where there are two components, each a 32-bit floating-point values.
		</constant>
		<constant name="FORMAT_RGBF" value="10" enum="Format">
			OpenGL texture format GL_RGB32F where there are three components, each a 32-bit floating-point values.
		</constant>
		<constant name="FORMAT_RGBAF" value="11" enum="Format">
			OpenGL texture format GL_RGBA32F where there are four components, each a 32-bit floating-point values.
		</constant>
		<constant name="FORMAT_RH" value="12" enum="Format">
			OpenGL texture format GL_R32F where there's one component, a 16-bit "half-precision" floating-point value.
		</constant>
		<constant name="FORMAT_RGH" value="13" enum="Format">
			OpenGL texture format GL_RG32F where there's two components, each a 16-bit "half-precision" floating-point value.
		</constant>
		<constant name="FORMAT_RGBH" value="14" enum="Format">
			OpenGL texture format GL_RGB32F where there's three components, each a 16-bit "half-precision" floating-point value.
		</constant>
		<constant name="FORMAT_RGBAH" value="15" enum="Format">
			OpenGL texture format GL_RGBA32F where there's four components, each a 16-bit "half-precision" floating-point value.
		</constant>
		<constant name="FORMAT_RGBE9995" value="16" enum="Format">
			A special OpenGL texture format where the three color components have 9 bits of precision and all three share a single exponent.
		</constant>
		<constant name="FORMAT_DXT1" value="17" enum="Format">
			The S3TC texture format that uses Block Compression 1, and is the smallest variation of S3TC, only providing 1 bit of alpha and color data being premultiplied with alpha. More information can be found at https://www.khronos.org/opengl/wiki/S3_Texture_Compression. Note that when creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_DXT3" value="18" enum="Format">
			The S3TC texture format that uses Block Compression 2, and color data is interpreted as not having been premultiplied by alpha. Well suited for images with sharp alpha transitions between translucent and opaque areas. Note that when creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_DXT5" value="19" enum="Format">
			The S3TC texture format also known as Block Compression 3 or BC3 that contains 64 bits of alpha channel data followed by 64 bits of DXT1-encoded color data. Color data is not premultiplied by alpha, same as DXT3. DXT5 generally produces superior results for transparency gradients than DXT3. Note that when creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_RGTC_R" value="20" enum="Format">
			Texture format that uses Red Green Texture Compression, normalizing the red channel data using the same compression algorithm that DXT5 uses for the alpha channel. More information can be found here https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression.
		</constant>
		<constant name="FORMAT_RGTC_RG" value="21" enum="Format">
			Texture format that uses Red Green Texture Compression, normalizing the red and green channel data using the same compression algorithm that DXT5 uses for the alpha channel.
		</constant>
		<constant name="FORMAT_BPTC_RGBA" value="22" enum="Format">
			Texture format that uses BPTC compression with unsigned normalized RGBA components. More information can be found at https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression. Note that when creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_BPTC_RGBF" value="23" enum="Format">
			Texture format that uses BPTC compression with signed floating-point RGB components.
		</constant>
		<constant name="FORMAT_BPTC_RGBFU" value="24" enum="Format">
			Texture format that uses BPTC compression with unsigned floating-point RGB components.
		</constant>
		<constant name="FORMAT_PVRTC2" value="25" enum="Format">
			Texture format used on PowerVR-supported mobile platforms, uses 2 bit color depth with no alpha. More information on PVRTC can be found here https://en.wikipedia.org/wiki/PVRTC. Note that when creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_PVRTC2A" value="26" enum="Format">
			Same as PVRTC2, but with an alpha component.
		</constant>
		<constant name="FORMAT_PVRTC4" value="27" enum="Format">
			Similar to PVRTC2, but with 4 bit color depth and no alpha.
		</constant>
		<constant name="FORMAT_PVRTC4A" value="28" enum="Format">
			Same as PVRTC4, but with an alpha component.
		</constant>
		<constant name="FORMAT_ETC" value="29" enum="Format">
			Ericsson Texture Compression format, also referred to as 'ETC1', and is part of the OpenGL ES graphics standard. An overview of the format is given at https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1.
		</constant>
		<constant name="FORMAT_ETC2_R11" value="30" enum="Format">
			Ericsson Texture Compression format 2 variant R11_EAC, which provides one channel of unsigned data.
		</constant>
		<constant name="FORMAT_ETC2_R11S" value="31" enum="Format">
			Ericsson Texture Compression format 2 variant SIGNED_R11_EAC, which provides one channel of signed data.
		</constant>
		<constant name="FORMAT_ETC2_RG11" value="32" enum="Format">
			Ericsson Texture Compression format 2 variant RG11_EAC, which provides two channels of unsigned data.
		</constant>
		<constant name="FORMAT_ETC2_RG11S" value="33" enum="Format">
			Ericsson Texture Compression format 2 variant SIGNED_RG11_EAC, which provides two channels of signed data.
		</constant>
		<constant name="FORMAT_ETC2_RGB8" value="34" enum="Format">
			Ericsson Texture Compression format 2 variant RGB8, which is a followup of ETC1 and compresses RGB888 data. Note that when creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_ETC2_RGBA8" value="35" enum="Format">
			Ericsson Texture Compression format 2 variant RGBA8, which compresses RGBA8888 data with full alpha support. Note that when creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_ETC2_RGB8A1" value="36" enum="Format">
			Ericsson Texture Compression format 2 variant RGB8_PUNCHTHROUGH_ALPHA1, which compresses RGBA data to make alpha either fully transparent or fully opaque. Note that when creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_MAX" value="37" enum="Format">
		</constant>
		<constant name="INTERPOLATE_NEAREST" value="0" enum="Interpolation">
		</constant>
		<constant name="INTERPOLATE_BILINEAR" value="1" enum="Interpolation">
		</constant>
		<constant name="INTERPOLATE_CUBIC" value="2" enum="Interpolation">
		</constant>
		<constant name="INTERPOLATE_TRILINEAR" value="3" enum="Interpolation">
			Performs bilinear separately on the two most suited mipmap levels, then linearly interpolates between them.
			It's slower than [code]INTERPOLATE_BILINEAR[/code], but produces higher quality results, with much less aliasing artifacts.
			If the image does not have mipmaps, they will be generated and used internally, but no mipmaps will be generated on the resulting image. (Note that if you intend to scale multiple copies of the original image, it's better to call [code]generate_mipmaps[/code] on it in advance, to avoid wasting processing power in generating them again and again.)
			On the other hand, if the image already has mipmaps, they will be used, and a new set will be generated for the resulting image.
		</constant>
		<constant name="ALPHA_NONE" value="0" enum="AlphaMode">
		</constant>
		<constant name="ALPHA_BIT" value="1" enum="AlphaMode">
		</constant>
		<constant name="ALPHA_BLEND" value="2" enum="AlphaMode">
		</constant>
		<constant name="COMPRESS_S3TC" value="0" enum="CompressMode">
		</constant>
		<constant name="COMPRESS_PVRTC2" value="1" enum="CompressMode">
		</constant>
		<constant name="COMPRESS_PVRTC4" value="2" enum="CompressMode">
		</constant>
		<constant name="COMPRESS_ETC" value="3" enum="CompressMode">
		</constant>
		<constant name="COMPRESS_ETC2" value="4" enum="CompressMode">
		</constant>
		<constant name="COMPRESS_SOURCE_GENERIC" value="0" enum="CompressSource">
		</constant>
		<constant name="COMPRESS_SOURCE_SRGB" value="1" enum="CompressSource">
		</constant>
		<constant name="COMPRESS_SOURCE_NORMAL" value="2" enum="CompressSource">
		</constant>
	</constants>
</class>
