<?xml version="1.0" encoding="UTF-8" ?>
<class name="File" inherits="Reference" category="Core" version="3.1.1">
	<brief_description>
		Type to handle file reading and writing operations.
	</brief_description>
	<description>
		File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.
		Here's a sample on how to write and read from a file:
		[codeblock]
		func save(content):
		    var file = File.new()
		    file.open("user://save_game.dat", File.WRITE)
		    file.store_string(content)
		    file.close()

		func load():
		    var file = File.new()
		    file.open("user://save_game.dat", File.READ)
		    var content = file.get_as_text()
		    file.close()
		    return content
		[/codeblock]
	</description>
	<tutorials>
		<link>https://docs.godotengine.org/en/latest/getting_started/step_by_step/filesystem.html</link>
	</tutorials>
	<methods>
		<method name="close">
			<return type="void">
			</return>
			<description>
				Closes the currently opened file.
			</description>
		</method>
		<method name="eof_reached" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the file cursor has read past the end of the file. Note that this function will still return [code]false[/code] while at the end of the file and only activates when reading past it. This can be confusing but it conforms to how low level file access works in all operating systems. There is always [method get_len] and [method get_position] to implement a custom logic.
			</description>
		</method>
		<method name="file_exists" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
				Returns [code]true[/code] if the file exists in the given path.
				Note that many resources types are imported (e.g. textures or sound files), and that their source asset will not be included in the exported game, as only the imported version is used (in the [code]res://.import[/code] folder). To check for the existence of such resources while taking into account the remapping to their imported location, use [method ResourceLoader.exists]. Typically, using [code]File.file_exists[/code] on an imported resource would work while you are developing in the editor (the source asset is present in [code]res://[/code], but fail when exported).
			</description>
		</method>
		<method name="get_16" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the next 16 bits from the file as an integer.
			</description>
		</method>
		<method name="get_32" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the next 32 bits from the file as an integer.
			</description>
		</method>
		<method name="get_64" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the next 64 bits from the file as an integer.
			</description>
		</method>
		<method name="get_8" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the next 8 bits from the file as an integer.
			</description>
		</method>
		<method name="get_as_text" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the whole file as a [String].
				Text is interpreted as being UTF-8 encoded.
			</description>
		</method>
		<method name="get_buffer" qualifiers="const">
			<return type="PoolByteArray">
			</return>
			<argument index="0" name="len" type="int">
			</argument>
			<description>
				Returns next [code]len[/code] bytes of the file as a [PoolByteArray].
			</description>
		</method>
		<method name="get_csv_line" qualifiers="const">
			<return type="PoolStringArray">
			</return>
			<argument index="0" name="delim" type="String" default="&quot;,&quot;">
			</argument>
			<description>
				Returns the next value of the file in CSV (Comma Separated Values) format. You can pass a different delimiter to use other than the default "," (comma), it should be one character long.
				Text is interpreted as being UTF-8 encoded.
			</description>
		</method>
		<method name="get_double" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the next 64 bits from the file as a floating point number.
			</description>
		</method>
		<method name="get_error" qualifiers="const">
			<return type="int" enum="Error">
			</return>
			<description>
				Returns the last error that happened when trying to perform operations. Compare with the [code]ERR_FILE_*[/code] constants from [@GlobalScope].
			</description>
		</method>
		<method name="get_float" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the next 32 bits from the file as a floating point number.
			</description>
		</method>
		<method name="get_len" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the size of the file in bytes.
			</description>
		</method>
		<method name="get_line" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the next line of the file as a [String].
				Text is interpreted as being UTF-8 encoded.
			</description>
		</method>
		<method name="get_md5" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
				Returns an MD5 String representing the file at the given path or an empty [String] on failure.
			</description>
		</method>
		<method name="get_modified_time" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Returns the last time the [code]file[/code] was modified in unix timestamp format or returns a [String] "ERROR IN [code]file[/code]". This unix timestamp can be converted to datetime by using [method OS.get_datetime_from_unix_time].
			</description>
		</method>
		<method name="get_pascal_string">
			<return type="String">
			</return>
			<description>
				Returns a [String] saved in Pascal format from the file.
				Text is interpreted as being UTF-8 encoded.
			</description>
		</method>
		<method name="get_path" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the path as a [String] for the current open file.
			</description>
		</method>
		<method name="get_path_absolute" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the absolute path as a [String] for the current open file.
			</description>
		</method>
		<method name="get_position" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the file cursor's position.
			</description>
		</method>
		<method name="get_real" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the next bits from the file as a floating point number.
			</description>
		</method>
		<method name="get_sha256" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
				Returns a SHA-256 [String] representing the file at the given path or an empty [String] on failure.
			</description>
		</method>
		<method name="get_var" qualifiers="const">
			<return type="Variant">
			</return>
			<argument index="0" name="allow_objects" type="bool" default="false">
			</argument>
			<description>
				Returns the next [Variant] value from the file. When [code]allow_objects[/code] is [code]true[/code] decoding objects is allowed.
				[b]WARNING:[/b] Deserialized object can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats (remote code execution).
			</description>
		</method>
		<method name="is_open" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the file is currently opened.
			</description>
		</method>
		<method name="open">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="flags" type="int">
			</argument>
			<description>
				Opens the file for writing or reading, depending on the flags.
			</description>
		</method>
		<method name="open_compressed">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="mode_flags" type="int">
			</argument>
			<argument index="2" name="compression_mode" type="int" default="0">
			</argument>
			<description>
				Opens a compressed file for reading or writing. Use COMPRESSION_* constants to set [code]compression_mode[/code].
			</description>
		</method>
		<method name="open_encrypted">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="mode_flags" type="int">
			</argument>
			<argument index="2" name="key" type="PoolByteArray">
			</argument>
			<description>
				Opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.
			</description>
		</method>
		<method name="open_encrypted_with_pass">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="mode_flags" type="int">
			</argument>
			<argument index="2" name="pass" type="String">
			</argument>
			<description>
				Opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.
			</description>
		</method>
		<method name="seek">
			<return type="void">
			</return>
			<argument index="0" name="position" type="int">
			</argument>
			<description>
				Change the file reading/writing cursor to the specified position (in bytes from the beginning of the file).
			</description>
		</method>
		<method name="seek_end">
			<return type="void">
			</return>
			<argument index="0" name="position" type="int" default="0">
			</argument>
			<description>
				Changes the file reading/writing cursor to the specified position (in bytes from the end of the file). Note that this is an offset, so you should use negative numbers or the cursor will be at the end of the file.
			</description>
		</method>
		<method name="store_16">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Stores an integer as 16 bits in the file.
			</description>
		</method>
		<method name="store_32">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Stores an integer as 32 bits in the file.
			</description>
		</method>
		<method name="store_64">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Stores an integer as 64 bits in the file.
			</description>
		</method>
		<method name="store_8">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Stores an integer as 8 bits in the file.
			</description>
		</method>
		<method name="store_buffer">
			<return type="void">
			</return>
			<argument index="0" name="buffer" type="PoolByteArray">
			</argument>
			<description>
				Stores the given array of bytes in the file.
			</description>
		</method>
		<method name="store_csv_line">
			<return type="void">
			</return>
			<argument index="0" name="values" type="PoolStringArray">
			</argument>
			<argument index="1" name="delim" type="String" default="&quot;,&quot;">
			</argument>
			<description>
				Store the given [PoolStringArray] in the file as a line formatted in the CSV (Comma Separated Values) format. You can pass a different delimiter to use other than the default "," (comma), it should be one character long.
				Text will be encoded as UTF-8.
			</description>
		</method>
		<method name="store_double">
			<return type="void">
			</return>
			<argument index="0" name="value" type="float">
			</argument>
			<description>
				Stores a floating point number as 64 bits in the file.
			</description>
		</method>
		<method name="store_float">
			<return type="void">
			</return>
			<argument index="0" name="value" type="float">
			</argument>
			<description>
				Stores a floating point number as 32 bits in the file.
			</description>
		</method>
		<method name="store_line">
			<return type="void">
			</return>
			<argument index="0" name="line" type="String">
			</argument>
			<description>
				Stores the given [String] as a line in the file.
				Text will be encoded as UTF-8.
			</description>
		</method>
		<method name="store_pascal_string">
			<return type="void">
			</return>
			<argument index="0" name="string" type="String">
			</argument>
			<description>
				Stores the given [String] as a line in the file in Pascal format (i.e. also store the length of the string).
				Text will be encoded as UTF-8.
			</description>
		</method>
		<method name="store_real">
			<return type="void">
			</return>
			<argument index="0" name="value" type="float">
			</argument>
			<description>
				Stores a floating point number in the file.
			</description>
		</method>
		<method name="store_string">
			<return type="void">
			</return>
			<argument index="0" name="string" type="String">
			</argument>
			<description>
				Stores the given [String] in the file.
				Text will be encoded as UTF-8.
			</description>
		</method>
		<method name="store_var">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<argument index="1" name="full_objects" type="bool" default="false">
			</argument>
			<description>
				Stores any Variant value in the file. When [code]full_objects[/code] is [code]true[/code] encoding objects is allowed (and can potentially include code).
			</description>
		</method>
	</methods>
	<members>
		<member name="endian_swap" type="bool" setter="set_endian_swap" getter="get_endian_swap">
			If [code]true[/code], the file's endianness is swapped. Use this if you're dealing with files written in big endian machines.
			Note that this is about the file format, not CPU type. This is always reset to [code]false[/code] whenever you open the file.
		</member>
	</members>
	<constants>
		<constant name="READ" value="1" enum="ModeFlags">
			Opens the file for read operations.
		</constant>
		<constant name="WRITE" value="2" enum="ModeFlags">
			Opens the file for write operations. Create it if the file does not exist and truncate if it exists.
		</constant>
		<constant name="READ_WRITE" value="3" enum="ModeFlags">
			Opens the file for read and write operations. Does not truncate the file.
		</constant>
		<constant name="WRITE_READ" value="7" enum="ModeFlags">
			Opens the file for read and write operations. Create it if the file does not exist and truncate if it exists.
		</constant>
		<constant name="COMPRESSION_FASTLZ" value="0" enum="CompressionMode">
			Uses the FastLZ compression method.
		</constant>
		<constant name="COMPRESSION_DEFLATE" value="1" enum="CompressionMode">
			Uses the Deflate compression method.
		</constant>
		<constant name="COMPRESSION_ZSTD" value="2" enum="CompressionMode">
			Uses the Zstd compression method.
		</constant>
		<constant name="COMPRESSION_GZIP" value="3" enum="CompressionMode">
			Uses the gzip compression method.
		</constant>
	</constants>
</class>
