<?xml version="1.0" encoding="UTF-8" ?>
<class name="BakedLightmap" inherits="VisualInstance" category="Core" version="3.1.1">
	<brief_description>
		Prerendered indirect light map for a scene.
	</brief_description>
	<description>
		Baked lightmaps are an alternative workflow for adding indirect (or baked) lighting to a scene. Unlike the [GIProbe] approach, baked lightmaps work fine on low-end PCs and mobile devices as they consume almost no resources in run-time.
	</description>
	<tutorials>
		<link>https://docs.godotengine.org/en/latest/tutorials/3d/baked_lightmaps.html</link>
	</tutorials>
	<methods>
		<method name="bake">
			<return type="int" enum="BakedLightmap.BakeError">
			</return>
			<argument index="0" name="from_node" type="Node" default="null">
			</argument>
			<argument index="1" name="create_visual_debug" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="debug_bake">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="bake_cell_size" type="float" setter="set_bake_cell_size" getter="get_bake_cell_size">
			Grid subdivision size for lightmapper calculation. Default value of [code]0.25[/code] will work for most cases. Increase for better lighting on small details or if your scene is very large.
		</member>
		<member name="bake_energy" type="float" setter="set_energy" getter="get_energy">
		</member>
		<member name="bake_extents" type="Vector3" setter="set_extents" getter="get_extents">
			Size of affected area.
		</member>
		<member name="bake_hdr" type="bool" setter="set_hdr" getter="is_hdr">
			If [code]true[/code], lightmap can capture light values greater than [code]1.0[/code]. Turning this off will result in a smaller lightmap. Default value:[code]false[/code].
		</member>
		<member name="bake_mode" type="int" setter="set_bake_mode" getter="get_bake_mode" enum="BakedLightmap.BakeMode">
			Lightmapping mode. See [enum BakeMode].
		</member>
		<member name="bake_propagation" type="float" setter="set_propagation" getter="get_propagation">
		</member>
		<member name="bake_quality" type="int" setter="set_bake_quality" getter="get_bake_quality" enum="BakedLightmap.BakeQuality">
			Three quality modes are available. Higher quality requires more rendering time. See [enum BakeQuality].
		</member>
		<member name="capture_cell_size" type="float" setter="set_capture_cell_size" getter="get_capture_cell_size">
			Grid size used for real-time capture information on dynamic objects. Cannot be larger than [member bake_cell_size].
		</member>
		<member name="image_path" type="String" setter="set_image_path" getter="get_image_path">
			Location where lightmaps will be saved.
		</member>
		<member name="light_data" type="BakedLightmapData" setter="set_light_data" getter="get_light_data">
			The calculated light data.
		</member>
	</members>
	<constants>
		<constant name="BAKE_QUALITY_LOW" value="0" enum="BakeQuality">
			Lowest bake quality mode. Fastest to calculate.
		</constant>
		<constant name="BAKE_QUALITY_MEDIUM" value="1" enum="BakeQuality">
			Default bake quality mode.
		</constant>
		<constant name="BAKE_QUALITY_HIGH" value="2" enum="BakeQuality">
			Highest bake quality mode. Takes longer to calculate.
		</constant>
		<constant name="BAKE_MODE_CONE_TRACE" value="0" enum="BakeMode">
			Less precise but faster bake mode.
		</constant>
		<constant name="BAKE_MODE_RAY_TRACE" value="1" enum="BakeMode">
			More precise bake mode but can take considerably longer to bake.
		</constant>
		<constant name="BAKE_ERROR_OK" value="0" enum="BakeError">
		</constant>
		<constant name="BAKE_ERROR_NO_SAVE_PATH" value="1" enum="BakeError">
		</constant>
		<constant name="BAKE_ERROR_NO_MESHES" value="2" enum="BakeError">
		</constant>
		<constant name="BAKE_ERROR_CANT_CREATE_IMAGE" value="3" enum="BakeError">
		</constant>
		<constant name="BAKE_ERROR_USER_ABORTED" value="4" enum="BakeError">
		</constant>
	</constants>
</class>
