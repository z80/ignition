<?xml version="1.0" encoding="UTF-8" ?>
<class name="AABB" version="3.2">
	<brief_description>
		Axis-Aligned Bounding Box.
	</brief_description>
	<description>
		AABB consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.
	</description>
	<tutorials>
		<link>https://docs.godotengine.org/en/latest/tutorials/math/index.html</link>
	</tutorials>
	<methods>
		<method name="AABB">
			<return type="AABB">
			</return>
			<argument index="0" name="position" type="Vector3">
			</argument>
			<argument index="1" name="size" type="Vector3">
			</argument>
			<description>
				Optional constructor, accepts position and size.
			</description>
		</method>
		<method name="encloses">
			<return type="bool">
			</return>
			<argument index="0" name="with" type="AABB">
			</argument>
			<description>
				Returns [code]true[/code] if this [AABB] completely encloses another one.
			</description>
		</method>
		<method name="expand">
			<return type="AABB">
			</return>
			<argument index="0" name="to_point" type="Vector3">
			</argument>
			<description>
				Returns this [AABB] expanded to include a given point.
			</description>
		</method>
		<method name="get_area">
			<return type="float">
			</return>
			<description>
				Returns the volume of the [AABB].
			</description>
		</method>
		<method name="get_endpoint">
			<return type="Vector3">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Gets the position of the 8 endpoints of the [AABB] in space.
			</description>
		</method>
		<method name="get_longest_axis">
			<return type="Vector3">
			</return>
			<description>
				Returns the normalized longest axis of the [AABB].
			</description>
		</method>
		<method name="get_longest_axis_index">
			<return type="int">
			</return>
			<description>
				Returns the index of the longest axis of the [AABB] (according to [Vector3]'s [code]AXIS_*[/code] constants).
			</description>
		</method>
		<method name="get_longest_axis_size">
			<return type="float">
			</return>
			<description>
				Returns the scalar length of the longest axis of the [AABB].
			</description>
		</method>
		<method name="get_shortest_axis">
			<return type="Vector3">
			</return>
			<description>
				Returns the normalized shortest axis of the [AABB].
			</description>
		</method>
		<method name="get_shortest_axis_index">
			<return type="int">
			</return>
			<description>
				Returns the index of the shortest axis of the [AABB] (according to [Vector3]::AXIS* enum).
			</description>
		</method>
		<method name="get_shortest_axis_size">
			<return type="float">
			</return>
			<description>
				Returns the scalar length of the shortest axis of the [AABB].
			</description>
		</method>
		<method name="get_support">
			<return type="Vector3">
			</return>
			<argument index="0" name="dir" type="Vector3">
			</argument>
			<description>
				Returns the support point in a given direction. This is useful for collision detection algorithms.
			</description>
		</method>
		<method name="grow">
			<return type="AABB">
			</return>
			<argument index="0" name="by" type="float">
			</argument>
			<description>
				Returns a copy of the [AABB] grown a given amount of units towards all the sides.
			</description>
		</method>
		<method name="has_no_area">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the [AABB] is flat or empty.
			</description>
		</method>
		<method name="has_no_surface">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the [AABB] is empty.
			</description>
		</method>
		<method name="has_point">
			<return type="bool">
			</return>
			<argument index="0" name="point" type="Vector3">
			</argument>
			<description>
				Returns [code]true[/code] if the [AABB] contains a point.
			</description>
		</method>
		<method name="intersection">
			<return type="AABB">
			</return>
			<argument index="0" name="with" type="AABB">
			</argument>
			<description>
				Returns the intersection between two [AABB]. An empty AABB (size 0,0,0) is returned on failure.
			</description>
		</method>
		<method name="intersects">
			<return type="bool">
			</return>
			<argument index="0" name="with" type="AABB">
			</argument>
			<description>
				Returns [code]true[/code] if the [AABB] overlaps with another.
			</description>
		</method>
		<method name="intersects_plane">
			<return type="bool">
			</return>
			<argument index="0" name="plane" type="Plane">
			</argument>
			<description>
				Returns [code]true[/code] if the [AABB] is on both sides of a plane.
			</description>
		</method>
		<method name="intersects_segment">
			<return type="bool">
			</return>
			<argument index="0" name="from" type="Vector3">
			</argument>
			<argument index="1" name="to" type="Vector3">
			</argument>
			<description>
				Returns [code]true[/code] if the [AABB] intersects the line segment between [code]from[/code] and [code]to[/code].
			</description>
		</method>
		<method name="is_equal_approx">
			<return type="bool">
			</return>
			<argument index="0" name="aabb" type="AABB">
			</argument>
			<description>
				Returns [code]true[/code] if this [AABB] and [code]aabb[/code] are approximately equal, by calling [method @GDScript.is_equal_approx] on each component.
			</description>
		</method>
		<method name="merge">
			<return type="AABB">
			</return>
			<argument index="0" name="with" type="AABB">
			</argument>
			<description>
				Returns a larger [AABB] that contains both this [AABB] and [code]with[/code].
			</description>
		</method>
	</methods>
	<members>
		<member name="end" type="Vector3" setter="" getter="" default="Vector3( 0, 0, 0 )">
			Ending corner. This is calculated as [code]position + size[/code]. Changing this property changes [member size] accordingly.
		</member>
		<member name="position" type="Vector3" setter="" getter="" default="Vector3( 0, 0, 0 )">
			Beginning corner.
		</member>
		<member name="size" type="Vector3" setter="" getter="" default="Vector3( 0, 0, 0 )">
			Size from position to end.
		</member>
	</members>
	<constants>
	</constants>
</class>
