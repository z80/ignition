<?xml version="1.0" encoding="UTF-8" ?>
<class name="AStar" inherits="Reference" category="Core" version="3.1.1">
	<brief_description>
		AStar class representation that uses vectors as edges.
	</brief_description>
	<description>
		A* (A star) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting an efficiently directed path between multiple points. It enjoys widespread use due to its performance and accuracy. Godot's A* implementation make use of vectors as points.
		You must add points manually with [method AStar.add_point] and create segments manually with [method AStar.connect_points]. So you can test if there is a path between two points with the [method AStar.are_points_connected] function, get the list of existing ids in the found path with [method AStar.get_id_path], or the points list with [method AStar.get_point_path].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_compute_cost" qualifiers="virtual">
			<return type="float">
			</return>
			<argument index="0" name="from_id" type="int">
			</argument>
			<argument index="1" name="to_id" type="int">
			</argument>
			<description>
				Called when computing the cost between two connected points.
			</description>
		</method>
		<method name="_estimate_cost" qualifiers="virtual">
			<return type="float">
			</return>
			<argument index="0" name="from_id" type="int">
			</argument>
			<argument index="1" name="to_id" type="int">
			</argument>
			<description>
				Called when estimating the cost between a point and the path's ending point.
			</description>
		</method>
		<method name="add_point">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="position" type="Vector3">
			</argument>
			<argument index="2" name="weight_scale" type="float" default="1.0">
			</argument>
			<description>
				Adds a new point at the given position with the given identifier. The algorithm prefers points with lower [code]weight_scale[/code] to form a path. The [code]id[/code] must be 0 or larger, and the [code]weight_scale[/code] must be 1 or larger.
				[codeblock]
				var as = AStar.new()
				as.add_point(1, Vector3(1, 0, 0), 4) # Adds the point (1, 0, 0) with weight_scale 4 and id 1
				[/codeblock]
				If there already exists a point for the given id, its position and weight scale are updated to the given values.
			</description>
		</method>
		<method name="are_points_connected" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="to_id" type="int">
			</argument>
			<description>
				Returns whether there is a connection/segment between the given points.
			</description>
		</method>
		<method name="clear">
			<return type="void">
			</return>
			<description>
				Clears all the points and segments.
			</description>
		</method>
		<method name="connect_points">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="to_id" type="int">
			</argument>
			<argument index="2" name="bidirectional" type="bool" default="true">
			</argument>
			<description>
				Creates a segment between the given points. If [code]bidirectional[/code] is [code]false[/code], only movement from [code]id[/code] to [code]to_id[/code] is allowed, not the reverse direction.
				[codeblock]
				var as = AStar.new()
				as.add_point(1, Vector3(1, 1, 0))
				as.add_point(2, Vector3(0, 5, 0))
				as.connect_points(1, 2, false)
				[/codeblock]
			</description>
		</method>
		<method name="disconnect_points">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="to_id" type="int">
			</argument>
			<description>
				Deletes the segment between the given points.
			</description>
		</method>
		<method name="get_available_point_id" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the next available point id with no point associated to it.
			</description>
		</method>
		<method name="get_closest_point" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="to_position" type="Vector3">
			</argument>
			<description>
				Returns the id of the closest point to [code]to_position[/code]. Returns -1 if there are no points in the points pool.
			</description>
		</method>
		<method name="get_closest_position_in_segment" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="to_position" type="Vector3">
			</argument>
			<description>
				Returns the closest position to [code]to_position[/code] that resides inside a segment between two connected points.
				[codeblock]
				var as = AStar.new()
				as.add_point(1, Vector3(0, 0, 0))
				as.add_point(2, Vector3(0, 5, 0))
				as.connect_points(1, 2)
				var res = as.get_closest_position_in_segment(Vector3(3, 3, 0)) # returns (0, 3, 0)
				[/codeblock]
				The result is in the segment that goes from [code]y = 0[/code] to [code]y = 5[/code]. It's the closest position in the segment to the given point.
			</description>
		</method>
		<method name="get_id_path">
			<return type="PoolIntArray">
			</return>
			<argument index="0" name="from_id" type="int">
			</argument>
			<argument index="1" name="to_id" type="int">
			</argument>
			<description>
				Returns an array with the ids of the points that form the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.
				[codeblock]
				var as = AStar.new()
				as.add_point(1, Vector3(0, 0, 0))
				as.add_point(2, Vector3(0, 1, 0), 1) # default weight is 1
				as.add_point(3, Vector3(1, 1, 0))
				as.add_point(4, Vector3(2, 0, 0))

				as.connect_points(1, 2, false)
				as.connect_points(2, 3, false)
				as.connect_points(4, 3, false)
				as.connect_points(1, 4, false)
				as.connect_points(5, 4, false)

				var res = as.get_id_path(1, 3) # returns [1, 2, 3]
				[/codeblock]
				If you change the 2nd point's weight to 3, then the result will be [code][1, 4, 3][/code] instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2.
			</description>
		</method>
		<method name="get_point_connections">
			<return type="PoolIntArray">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
				Returns an array with the ids of the points that form the connect with the given point.
				[codeblock]
				var as = AStar.new()
				as.add_point(1, Vector3(0, 0, 0))
				as.add_point(2, Vector3(0, 1, 0))
				as.add_point(3, Vector3(1, 1, 0))
				as.add_point(4, Vector3(2, 0, 0))

				as.connect_points(1, 2, true)
				as.connect_points(1, 3, true)

				var neighbors = as.get_point_connections(1) # returns [2, 3]
				[/codeblock]
			</description>
		</method>
		<method name="get_point_path">
			<return type="PoolVector3Array">
			</return>
			<argument index="0" name="from_id" type="int">
			</argument>
			<argument index="1" name="to_id" type="int">
			</argument>
			<description>
				Returns an array with the points that are in the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.
			</description>
		</method>
		<method name="get_point_position" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
				Returns the position of the point associated with the given id.
			</description>
		</method>
		<method name="get_point_weight_scale" qualifiers="const">
			<return type="float">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
				Returns the weight scale of the point associated with the given id.
			</description>
		</method>
		<method name="get_points">
			<return type="Array">
			</return>
			<description>
				Returns an array of all points.
			</description>
		</method>
		<method name="has_point" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
				Returns whether a point associated with the given id exists.
			</description>
		</method>
		<method name="is_point_disabled" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
				Returns whether a point is disabled or not for pathfinding. By default, all points are enabled.
			</description>
		</method>
		<method name="remove_point">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
				Removes the point associated with the given id from the points pool.
			</description>
		</method>
		<method name="set_point_disabled">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="disabled" type="bool" default="true">
			</argument>
			<description>
				Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle.
			</description>
		</method>
		<method name="set_point_position">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="position" type="Vector3">
			</argument>
			<description>
				Sets the position for the point with the given id.
			</description>
		</method>
		<method name="set_point_weight_scale">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="weight_scale" type="float">
			</argument>
			<description>
				Sets the [code]weight_scale[/code] for the point with the given id.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
