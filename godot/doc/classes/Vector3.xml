<?xml version="1.0" encoding="UTF-8" ?>
<class name="Vector3" category="Built-In Types" version="3.1.2">
	<brief_description>
		Vector class, which performs basic 3D vector math operations.
	</brief_description>
	<description>
		Vector3 is one of the core classes of the engine, and includes several built-in helper functions to perform basic vector math operations.
	</description>
	<tutorials>
		<link>https://docs.godotengine.org/en/3.1/tutorials/math/index.html</link>
	</tutorials>
	<methods>
		<method name="Vector3">
			<return type="Vector3">
			</return>
			<argument index="0" name="x" type="float">
			</argument>
			<argument index="1" name="y" type="float">
			</argument>
			<argument index="2" name="z" type="float">
			</argument>
			<description>
				Returns a Vector3 with the given components.
			</description>
		</method>
		<method name="abs">
			<return type="Vector3">
			</return>
			<description>
				Returns a new vector with all components in absolute values (i.e. positive).
			</description>
		</method>
		<method name="angle_to">
			<return type="float">
			</return>
			<argument index="0" name="to" type="Vector3">
			</argument>
			<description>
				Returns the minimum angle to the given vector.
			</description>
		</method>
		<method name="bounce">
			<return type="Vector3">
			</return>
			<argument index="0" name="n" type="Vector3">
			</argument>
			<description>
				Returns the vector "bounced off" from a plane defined by the given normal.
			</description>
		</method>
		<method name="ceil">
			<return type="Vector3">
			</return>
			<description>
				Returns a new vector with all components rounded up.
			</description>
		</method>
		<method name="cross">
			<return type="Vector3">
			</return>
			<argument index="0" name="b" type="Vector3">
			</argument>
			<description>
				Returns the cross product with [code]b[/code].
			</description>
		</method>
		<method name="cubic_interpolate">
			<return type="Vector3">
			</return>
			<argument index="0" name="b" type="Vector3">
			</argument>
			<argument index="1" name="pre_a" type="Vector3">
			</argument>
			<argument index="2" name="post_b" type="Vector3">
			</argument>
			<argument index="3" name="t" type="float">
			</argument>
			<description>
				Performs a cubic interpolation between vectors [code]pre_a[/code], [code]a[/code], [code]b[/code], [code]post_b[/code] ([code]a[/code] is current), by the given amount [code]t[/code]. [code]t[/code] is in the range of [code]0.0 - 1.0[/code], representing the amount of interpolation.
			</description>
		</method>
		<method name="direction_to">
			<return type="Vector3">
			</return>
			<argument index="0" name="b" type="Vector3">
			</argument>
			<description>
				Returns the normalized vector pointing from this vector to [code]b[/code].
			</description>
		</method>
		<method name="distance_squared_to">
			<return type="float">
			</return>
			<argument index="0" name="b" type="Vector3">
			</argument>
			<description>
				Returns the squared distance to [code]b[/code]. Prefer this function over [method distance_to] if you need to sort vectors or need the squared distance for some formula.
			</description>
		</method>
		<method name="distance_to">
			<return type="float">
			</return>
			<argument index="0" name="b" type="Vector3">
			</argument>
			<description>
				Returns the distance to [code]b[/code].
			</description>
		</method>
		<method name="dot">
			<return type="float">
			</return>
			<argument index="0" name="b" type="Vector3">
			</argument>
			<description>
				Returns the dot product with [code]b[/code].
			</description>
		</method>
		<method name="floor">
			<return type="Vector3">
			</return>
			<description>
				Returns a new vector with all components rounded down.
			</description>
		</method>
		<method name="inverse">
			<return type="Vector3">
			</return>
			<description>
				Returns the inverse of the vector. This is the same as [code]Vector3( 1.0 / v.x, 1.0 / v.y, 1.0 / v.z )[/code].
			</description>
		</method>
		<method name="is_normalized">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the vector is normalized.
			</description>
		</method>
		<method name="length">
			<return type="float">
			</return>
			<description>
				Returns the vector's length.
			</description>
		</method>
		<method name="length_squared">
			<return type="float">
			</return>
			<description>
				Returns the vector's length squared. Prefer this function over [method length] if you need to sort vectors or need the squared length for some formula.
			</description>
		</method>
		<method name="linear_interpolate">
			<return type="Vector3">
			</return>
			<argument index="0" name="b" type="Vector3">
			</argument>
			<argument index="1" name="t" type="float">
			</argument>
			<description>
				Returns the result of the linear interpolation between this vector and [code]b[/code] by amount [code]t[/code]. [code]t[/code] is in the range of [code]0.0 - 1.0[/code], representing the amount of interpolation..
			</description>
		</method>
		<method name="max_axis">
			<return type="int">
			</return>
			<description>
				Returns the axis of the vector's largest value. See [code]AXIS_*[/code] constants.
			</description>
		</method>
		<method name="min_axis">
			<return type="int">
			</return>
			<description>
				Returns the axis of the vector's smallest value. See [code]AXIS_*[/code] constants.
			</description>
		</method>
		<method name="normalized">
			<return type="Vector3">
			</return>
			<description>
				Returns the vector scaled to unit length. Equivalent to [code]v / v.length()[/code].
			</description>
		</method>
		<method name="outer">
			<return type="Basis">
			</return>
			<argument index="0" name="b" type="Vector3">
			</argument>
			<description>
				Returns the outer product with [code]b[/code].
			</description>
		</method>
		<method name="project">
			<return type="Vector3">
			</return>
			<argument index="0" name="b" type="Vector3">
			</argument>
			<description>
				Returns the vector projected onto the vector [code]b[/code].
			</description>
		</method>
		<method name="reflect">
			<return type="Vector3">
			</return>
			<argument index="0" name="n" type="Vector3">
			</argument>
			<description>
				Returns the vector reflected from a plane defined by the given normal.
			</description>
		</method>
		<method name="rotated">
			<return type="Vector3">
			</return>
			<argument index="0" name="axis" type="Vector3">
			</argument>
			<argument index="1" name="phi" type="float">
			</argument>
			<description>
				Rotates the vector around a given axis by [code]phi[/code] radians. The axis must be a normalized vector.
			</description>
		</method>
		<method name="round">
			<return type="Vector3">
			</return>
			<description>
				Returns the vector with all components rounded to the nearest integer, with halfway cases rounded away from zero.
			</description>
		</method>
		<method name="slerp">
			<return type="Vector3">
			</return>
			<argument index="0" name="b" type="Vector3">
			</argument>
			<argument index="1" name="t" type="float">
			</argument>
			<description>
				Returns the result of SLERP between this vector and [code]b[/code], by amount [code]t[/code]. [code]t[/code] is in the range of [code]0.0 - 1.0[/code], representing the amount of interpolation.
				Both vectors need to be normalized.
			</description>
		</method>
		<method name="slide">
			<return type="Vector3">
			</return>
			<argument index="0" name="n" type="Vector3">
			</argument>
			<description>
				Returns the component of the vector along a plane defined by the given normal.
			</description>
		</method>
		<method name="snapped">
			<return type="Vector3">
			</return>
			<argument index="0" name="by" type="Vector3">
			</argument>
			<description>
				Returns a copy of the vector, snapped to the lowest neared multiple.
			</description>
		</method>
		<method name="to_diagonal_matrix">
			<return type="Basis">
			</return>
			<description>
				Returns a diagonal matrix with the vector as main diagonal.
			</description>
		</method>
	</methods>
	<members>
		<member name="x" type="float" setter="" getter="">
			The vector's x component. Also accessible by using the index position [code][0][/code].
		</member>
		<member name="y" type="float" setter="" getter="">
			The vector's y component. Also accessible by using the index position [code][1][/code].
		</member>
		<member name="z" type="float" setter="" getter="">
			The vector's z component. Also accessible by using the index position [code][2][/code].
		</member>
	</members>
	<constants>
		<constant name="AXIS_X" value="0">
			Enumerated value for the X axis. Returned by [method max_axis] and [method min_axis].
		</constant>
		<constant name="AXIS_Y" value="1">
			Enumerated value for the Y axis.
		</constant>
		<constant name="AXIS_Z" value="2">
			Enumerated value for the Z axis.
		</constant>
		<constant name="ZERO" value="Vector3( 0, 0, 0 )">
			Zero vector.
		</constant>
		<constant name="ONE" value="Vector3( 1, 1, 1 )">
			One vector.
		</constant>
		<constant name="INF" value="Vector3( inf, inf, inf )">
			Infinite vector.
		</constant>
		<constant name="LEFT" value="Vector3( -1, 0, 0 )">
			Left unit vector.
		</constant>
		<constant name="RIGHT" value="Vector3( 1, 0, 0 )">
			Right unit vector.
		</constant>
		<constant name="UP" value="Vector3( 0, 1, 0 )">
			Up unit vector.
		</constant>
		<constant name="DOWN" value="Vector3( 0, -1, 0 )">
			Down unit vector.
		</constant>
		<constant name="FORWARD" value="Vector3( 0, 0, -1 )">
			Forward unit vector.
		</constant>
		<constant name="BACK" value="Vector3( 0, 0, 1 )">
			Back unit vector.
		</constant>
	</constants>
</class>
