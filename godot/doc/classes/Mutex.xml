<?xml version="1.0" encoding="UTF-8" ?>
<class name="Mutex" inherits="Reference" category="Core" version="3.1.2">
	<brief_description>
		A synchronization Mutex.
	</brief_description>
	<description>
		A synchronization Mutex. Element used to synchronize multiple [Thread]s. Basically a binary [Semaphore]. Guarantees that only one thread can ever acquire this lock at a time. Can be used to protect a critical section. Be careful to avoid deadlocks.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="lock">
			<return type="void">
			</return>
			<description>
				Lock this [code]Mutex[/code], blocks until it is unlocked by the current owner.
			</description>
		</method>
		<method name="try_lock">
			<return type="int" enum="Error">
			</return>
			<description>
				Try locking this [code]Mutex[/code], does not block. Returns [constant @GlobalScope.OK] on success, [constant @GlobalScope.ERR_BUSY] otherwise.
			</description>
		</method>
		<method name="unlock">
			<return type="void">
			</return>
			<description>
				Unlock this [code]Mutex[/code], leaving it to other threads.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
