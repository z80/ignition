<?xml version="1.0" encoding="UTF-8" ?>
<class name="ResourceFormatLoader" inherits="Reference" category="Core" version="3.1.1">
	<brief_description>
		Loads a specific resource type from a file.
	</brief_description>
	<description>
		Godot loads resources in the editor or in exported games using ResourceFormatLoaders. They get queried when you call [code]load[/code], or when a resource with internal dependencies is loaded. Each file type may load as a different resource type, so multiple ResourceFormatLoader are registered in the engine.
		Extending this class allows you to define your own. You should give it a global class name with [code]class_name[/code] for it to be registered. You may as well implement a [ResourceFormatSaver].
		Note: You can also extend [EditorImportPlugin] if the resource type you need exists but Godot is unable to load its format. Choosing one way over another depends if the format is suitable or not for the final exported game. Example: it's better to import .PNG textures as .STEX first, so they can be loaded with better efficiency on the graphics card.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_dependencies" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="add_types" type="String">
			</argument>
			<description>
				If implemented, gets the dependencies of a given resource. If [code]add_types[/code] is [code]true[/code], paths should be appended [code]::TypeName[/code], where [code]TypeName[/code] is the class name of the dependency. Note that custom resource types defined by scripts aren't known by the [ClassDB], so you might just return [code]Resource[/code] for them.
			</description>
		</method>
		<method name="get_recognized_extensions" qualifiers="virtual">
			<return type="PoolStringArray">
			</return>
			<description>
				Gets the list of extensions for files this loader is able to read.
			</description>
		</method>
		<method name="get_resource_type" qualifiers="virtual">
			<return type="String">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
				Gets the class name of the resource associated with the given path. If the loader cannot handle it, it should return [code]""[/code]. Note that custom resource types defined by scripts aren't known by the [ClassDB], so you might just return [code]"Resource"[/code] for them.
			</description>
		</method>
		<method name="handles_type" qualifiers="virtual">
			<return type="bool">
			</return>
			<argument index="0" name="typename" type="String">
			</argument>
			<description>
				Tells which resource class this loader can load. Note that custom resource types defined by scripts aren't known by the [ClassDB], so you might just handle [code]"Resource"[/code] for them.
			</description>
		</method>
		<method name="load" qualifiers="virtual">
			<return type="Variant">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="original_path" type="String">
			</argument>
			<description>
				Loads a resource when the engine finds this loader to be compatible. If the loaded resource is the result of an import, [code]original_path[/code] will target the source file. Returns a resource object if succeeded, or an [code]ERR_*[/code] constant listed in [@GlobalScope] if it failed.
			</description>
		</method>
		<method name="rename_dependencies" qualifiers="virtual">
			<return type="int">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="renames" type="String">
			</argument>
			<description>
				If implemented, renames dependencies within the given resource and saves it. [code]renames[/code] is a dictionary [code]{ String =&gt; String }[/code] mapping old dependency paths to new paths. Returns [code]OK[/code] on success, or an [code]ERR_*[/code] constant listed in [@GlobalScope] in case of failure.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
