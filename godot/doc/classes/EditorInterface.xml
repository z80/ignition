<?xml version="1.0" encoding="UTF-8" ?>
<class name="EditorInterface" inherits="Node" version="3.2">
	<brief_description>
		Godot editor's interface.
	</brief_description>
	<description>
		EditorInterface gives you control over Godot editor's window. It allows customizing the window, saving and (re-)loading scenes, rendering mesh previews, inspecting and editing resources and objects, and provides access to [EditorSettings], [EditorFileSystem], [EditorResourcePreview], [ScriptEditor], the editor viewport, and information about scenes.
		[b]Note:[/b] This class shouldn't be instantiated directly. Instead, access the singleton using [method EditorPlugin.get_editor_interface].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="edit_resource">
			<return type="void">
			</return>
			<argument index="0" name="resource" type="Resource">
			</argument>
			<description>
				Edits the given [Resource].
			</description>
		</method>
		<method name="get_base_control">
			<return type="Control">
			</return>
			<description>
				Returns the main container of Godot editor's window. You can use it, for example, to retrieve the size of the container and place your controls accordingly.
			</description>
		</method>
		<method name="get_current_path" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_edited_scene_root">
			<return type="Node">
			</return>
			<description>
				Returns the edited (current) scene's root [Node].
			</description>
		</method>
		<method name="get_editor_settings">
			<return type="EditorSettings">
			</return>
			<description>
				Returns the [EditorSettings].
			</description>
		</method>
		<method name="get_editor_viewport">
			<return type="Control">
			</return>
			<description>
				Returns the editor [Viewport].
			</description>
		</method>
		<method name="get_file_system_dock">
			<return type="FileSystemDock">
			</return>
			<description>
			</description>
		</method>
		<method name="get_inspector" qualifiers="const">
			<return type="EditorInspector">
			</return>
			<description>
			</description>
		</method>
		<method name="get_open_scenes" qualifiers="const">
			<return type="Array">
			</return>
			<description>
				Returns an [Array] with the file paths of the currently opened scenes.
			</description>
		</method>
		<method name="get_resource_filesystem">
			<return type="EditorFileSystem">
			</return>
			<description>
				Returns the [EditorFileSystem].
			</description>
		</method>
		<method name="get_resource_previewer">
			<return type="EditorResourcePreview">
			</return>
			<description>
				Returns the [EditorResourcePreview].
			</description>
		</method>
		<method name="get_script_editor">
			<return type="ScriptEditor">
			</return>
			<description>
				Returns the [ScriptEditor].
			</description>
		</method>
		<method name="get_selected_path" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selection">
			<return type="EditorSelection">
			</return>
			<description>
				Returns the [EditorSelection].
			</description>
		</method>
		<method name="inspect_object">
			<return type="void">
			</return>
			<argument index="0" name="object" type="Object">
			</argument>
			<argument index="1" name="for_property" type="String" default="&quot;&quot;">
			</argument>
			<description>
				Shows the given property on the given [code]object[/code] in the Editor's Inspector dock.
			</description>
		</method>
		<method name="is_plugin_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="plugin" type="String">
			</argument>
			<description>
				Returns the enabled status of a plugin. The plugin name is the same as its directory name.
			</description>
		</method>
		<method name="make_mesh_previews">
			<return type="Array">
			</return>
			<argument index="0" name="meshes" type="Array">
			</argument>
			<argument index="1" name="preview_size" type="int">
			</argument>
			<description>
				Returns mesh previews rendered at the given size as an [Array] of [Texture]s.
			</description>
		</method>
		<method name="open_scene_from_path">
			<return type="void">
			</return>
			<argument index="0" name="scene_filepath" type="String">
			</argument>
			<description>
				Opens the scene at the given path.
			</description>
		</method>
		<method name="reload_scene_from_path">
			<return type="void">
			</return>
			<argument index="0" name="scene_filepath" type="String">
			</argument>
			<description>
				Reloads the scene at the given path.
			</description>
		</method>
		<method name="save_scene">
			<return type="int" enum="Error">
			</return>
			<description>
				Saves the scene. Returns either [code]OK[/code] or [code]ERR_CANT_CREATE[/code] (see [@GlobalScope] constants).
			</description>
		</method>
		<method name="save_scene_as">
			<return type="void">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="with_preview" type="bool" default="true">
			</argument>
			<description>
				Saves the scene as a file at [code]path[/code].
			</description>
		</method>
		<method name="select_file">
			<return type="void">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Selects the file, with the path provided by [code]file[/code], in the FileSystem dock.
			</description>
		</method>
		<method name="set_main_screen_editor">
			<return type="void">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_plugin_enabled">
			<return type="void">
			</return>
			<argument index="0" name="plugin" type="String">
			</argument>
			<argument index="1" name="enabled" type="bool">
			</argument>
			<description>
				Sets the enabled status of a plugin. The plugin name is the same as its directory name.
			</description>
		</method>
	</methods>
	<members>
		<member name="distraction_free_mode" type="bool" setter="set_distraction_free_mode" getter="is_distraction_free_mode_enabled">
		</member>
	</members>
	<constants>
	</constants>
</class>
