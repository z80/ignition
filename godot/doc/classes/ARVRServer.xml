<?xml version="1.0" encoding="UTF-8" ?>
<class name="ARVRServer" inherits="Object" category="Core" version="3.1.2">
	<brief_description>
		This is our AR/VR Server.
	</brief_description>
	<description>
		The AR/VR Server is the heart of our AR/VR solution and handles all the processing.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="center_on_hmd">
			<return type="void">
			</return>
			<argument index="0" name="rotation_mode" type="int" enum="ARVRServer.RotationMode">
			</argument>
			<argument index="1" name="keep_height" type="bool">
			</argument>
			<description>
				This is a really important function to understand correctly. AR and VR platforms all handle positioning slightly differently.
				For platforms that do not offer spatial tracking our origin point (0,0,0) is the location of our HMD but you have little control over the direction the player is facing in the real world.
				For platforms that do offer spatial tracking our origin point depends very much on the system. For OpenVR our origin point is usually the center of the tracking space, on the ground. For other platforms its often the location of the tracking camera.
				This method allows you to center our tracker on the location of the HMD, it will take the current location of the HMD and use that to adjust all our tracking data in essence realigning the real world to your players current position in your game world.
				For this method to produce usable results tracking information should be available and this often takes a few frames after starting your game.
				You should call this method after a few seconds have passed, when the user requests a realignment of the display holding a designated button on a controller for a short period of time, and when implementing a teleport mechanism.
			</description>
		</method>
		<method name="find_interface" qualifiers="const">
			<return type="ARVRInterface">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Find an interface by its name. Say that you're making a game that uses specific capabilities of an AR/VR platform you can find the interface for that platform by name and initialize it.
			</description>
		</method>
		<method name="get_hmd_transform">
			<return type="Transform">
			</return>
			<description>
				Returns the primary interface's transformation.
			</description>
		</method>
		<method name="get_interface" qualifiers="const">
			<return type="ARVRInterface">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Get the interface registered at a given index in our list of interfaces.
			</description>
		</method>
		<method name="get_interface_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Get the number of interfaces currently registered with the AR/VR server. If your game supports multiple AR/VR platforms, you can look through the available interface, and either present the user with a selection or simply try an initialize each interface and use the first one that returns [code]true[/code].
			</description>
		</method>
		<method name="get_interfaces" qualifiers="const">
			<return type="Array">
			</return>
			<description>
				Returns a list of available interfaces with both id and name of the interface.
			</description>
		</method>
		<method name="get_last_commit_usec">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_last_frame_usec">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_last_process_usec">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_reference_frame" qualifiers="const">
			<return type="Transform">
			</return>
			<description>
				Gets our reference frame transform, mostly used internally and exposed for GDNative build interfaces.
			</description>
		</method>
		<method name="get_tracker" qualifiers="const">
			<return type="ARVRPositionalTracker">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Get the positional tracker at the given ID.
			</description>
		</method>
		<method name="get_tracker_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Get the number of trackers currently registered.
			</description>
		</method>
	</methods>
	<members>
		<member name="primary_interface" type="ARVRInterface" setter="set_primary_interface" getter="get_primary_interface">
		</member>
		<member name="world_scale" type="float" setter="set_world_scale" getter="get_world_scale">
			Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 meter in the real world.
		</member>
	</members>
	<signals>
		<signal name="interface_added">
			<argument index="0" name="interface_name" type="String">
			</argument>
			<description>
				Signal send when a new interface has been added.
			</description>
		</signal>
		<signal name="interface_removed">
			<argument index="0" name="interface_name" type="String">
			</argument>
			<description>
				Signal send when an interface is removed.
			</description>
		</signal>
		<signal name="tracker_added">
			<argument index="0" name="tracker_name" type="String">
			</argument>
			<argument index="1" name="type" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<description>
				Signal send when a new tracker has been added. If you don't use a fixed number of controllers or if you're using ARVRAnchors for an AR solution it is important to react to this signal and add the appropriate ARVRController or ARVRAnchor node related to this new tracker.
			</description>
		</signal>
		<signal name="tracker_removed">
			<argument index="0" name="tracker_name" type="String">
			</argument>
			<argument index="1" name="type" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<description>
				Signal send when a tracker is removed, you should remove any ARVRController or ARVRAnchor points if applicable. This is not mandatory, the nodes simply become inactive and will be made active again when a new tracker becomes available (i.e. a new controller is switched on that takes the place of the previous one).
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="TRACKER_CONTROLLER" value="1" enum="TrackerType">
			Our tracker tracks the location of a controller.
		</constant>
		<constant name="TRACKER_BASESTATION" value="2" enum="TrackerType">
			Our tracker tracks the location of a base station.
		</constant>
		<constant name="TRACKER_ANCHOR" value="4" enum="TrackerType">
			Our tracker tracks the location and size of an AR anchor.
		</constant>
		<constant name="TRACKER_ANY_KNOWN" value="127" enum="TrackerType">
			Used internally to filter trackers of any known type.
		</constant>
		<constant name="TRACKER_UNKNOWN" value="128" enum="TrackerType">
			Used internally if we haven't set the tracker type yet.
		</constant>
		<constant name="TRACKER_ANY" value="255" enum="TrackerType">
			Used internally to select all trackers.
		</constant>
		<constant name="RESET_FULL_ROTATION" value="0" enum="RotationMode">
			Fully reset the orientation of the HMD. Regardless of what direction the user is looking to in the real world. The user will look dead ahead in the virtual world.
		</constant>
		<constant name="RESET_BUT_KEEP_TILT" value="1" enum="RotationMode">
			Resets the orientation but keeps the tilt of the device. So if we're looking down, we keep looking down but heading will be reset.
		</constant>
		<constant name="DONT_RESET_ROTATION" value="2" enum="RotationMode">
			Does not reset the orientation of the HMD, only the position of the player gets centered.
		</constant>
	</constants>
</class>
