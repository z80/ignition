<?xml version="1.0" encoding="UTF-8" ?>
<class name="Vector2" category="Built-In Types" version="3.1.1">
	<brief_description>
		Vector used for 2D math.
	</brief_description>
	<description>
		2-element structure that can be used to represent positions in 2d space or any other pair of numeric values.
	</description>
	<tutorials>
		<link>https://docs.godotengine.org/en/latest/tutorials/math/index.html</link>
	</tutorials>
	<methods>
		<method name="Vector2">
			<return type="Vector2">
			</return>
			<argument index="0" name="x" type="float">
			</argument>
			<argument index="1" name="y" type="float">
			</argument>
			<description>
				Constructs a new Vector2 from the given x and y.
			</description>
		</method>
		<method name="abs">
			<return type="Vector2">
			</return>
			<description>
				Returns a new vector with all components in absolute values (i.e. positive).
			</description>
		</method>
		<method name="angle">
			<return type="float">
			</return>
			<description>
				Returns the vector's angle in radians with respect to the x-axis, or [code](1, 0)[/code] vector.
				Equivalent to the result of atan2 when called with the vector's x and y as parameters: [code]atan2(x, y)[/code].
			</description>
		</method>
		<method name="angle_to">
			<return type="float">
			</return>
			<argument index="0" name="to" type="Vector2">
			</argument>
			<description>
				Returns the angle in radians between the two vectors.
			</description>
		</method>
		<method name="angle_to_point">
			<return type="float">
			</return>
			<argument index="0" name="to" type="Vector2">
			</argument>
			<description>
				Returns the angle in radians between the line connecting the two points and the x coordinate.
			</description>
		</method>
		<method name="aspect">
			<return type="float">
			</return>
			<description>
				Returns the ratio of x to y.
			</description>
		</method>
		<method name="bounce">
			<return type="Vector2">
			</return>
			<argument index="0" name="n" type="Vector2">
			</argument>
			<description>
				Returns the vector "bounced off" from a plane defined by the given normal.
			</description>
		</method>
		<method name="ceil">
			<return type="Vector2">
			</return>
			<description>
				Returns the vector with all components rounded up.
			</description>
		</method>
		<method name="clamped">
			<return type="Vector2">
			</return>
			<argument index="0" name="length" type="float">
			</argument>
			<description>
				Returns the vector with a maximum length.
			</description>
		</method>
		<method name="cross">
			<return type="float">
			</return>
			<argument index="0" name="with" type="Vector2">
			</argument>
			<description>
				Returns the 2 dimensional analog of the cross product with the given vector.
			</description>
		</method>
		<method name="cubic_interpolate">
			<return type="Vector2">
			</return>
			<argument index="0" name="b" type="Vector2">
			</argument>
			<argument index="1" name="pre_a" type="Vector2">
			</argument>
			<argument index="2" name="post_b" type="Vector2">
			</argument>
			<argument index="3" name="t" type="float">
			</argument>
			<description>
				Cubicly interpolates between this vector and [code]b[/code] using [code]pre_a[/code] and [code]post_b[/code] as handles, and returns the result at position [code]t[/code]. [code]t[/code] is in the range of [code]0.0 - 1.0[/code], representing the amount of interpolation.
			</description>
		</method>
		<method name="direction_to">
			<return type="Vector2">
			</return>
			<argument index="0" name="b" type="Vector2">
			</argument>
			<description>
				Returns the normalized vector pointing from this vector to [code]b[/code].
			</description>
		</method>
		<method name="distance_squared_to">
			<return type="float">
			</return>
			<argument index="0" name="to" type="Vector2">
			</argument>
			<description>
				Returns the squared distance to vector [code]b[/code]. Prefer this function over [method distance_to] if you need to sort vectors or need the squared distance for some formula.
			</description>
		</method>
		<method name="distance_to">
			<return type="float">
			</return>
			<argument index="0" name="to" type="Vector2">
			</argument>
			<description>
				Returns the distance to vector [code]b[/code].
			</description>
		</method>
		<method name="dot">
			<return type="float">
			</return>
			<argument index="0" name="with" type="Vector2">
			</argument>
			<description>
				Returns the dot product with vector [code]b[/code].
			</description>
		</method>
		<method name="floor">
			<return type="Vector2">
			</return>
			<description>
				Returns the vector with all components rounded down.
			</description>
		</method>
		<method name="is_normalized">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the vector is normalized.
			</description>
		</method>
		<method name="length">
			<return type="float">
			</return>
			<description>
				Returns the vector's length.
			</description>
		</method>
		<method name="length_squared">
			<return type="float">
			</return>
			<description>
				Returns the vector's length squared. Prefer this method over [method length] if you need to sort vectors or need the squared length for some formula.
			</description>
		</method>
		<method name="linear_interpolate">
			<return type="Vector2">
			</return>
			<argument index="0" name="b" type="Vector2">
			</argument>
			<argument index="1" name="t" type="float">
			</argument>
			<description>
				Returns the result of the linear interpolation between this vector and [code]b[/code] by amount [code]t[/code]. [code]t[/code] is in the range of [code]0.0 - 1.0[/code], representing the amount of interpolation.
			</description>
		</method>
		<method name="normalized">
			<return type="Vector2">
			</return>
			<description>
				Returns the vector scaled to unit length. Equivalent to [code]v / v.length()[/code].
			</description>
		</method>
		<method name="project">
			<return type="Vector2">
			</return>
			<argument index="0" name="b" type="Vector2">
			</argument>
			<description>
				Returns the vector projected onto the vector [code]b[/code].
			</description>
		</method>
		<method name="reflect">
			<return type="Vector2">
			</return>
			<argument index="0" name="n" type="Vector2">
			</argument>
			<description>
				Returns the vector reflected from a plane defined by the given normal.
			</description>
		</method>
		<method name="rotated">
			<return type="Vector2">
			</return>
			<argument index="0" name="phi" type="float">
			</argument>
			<description>
				Returns the vector rotated by [code]phi[/code] radians.
			</description>
		</method>
		<method name="round">
			<return type="Vector2">
			</return>
			<description>
				Returns the vector with all components rounded to the nearest integer, with halfway cases rounded away from zero.
			</description>
		</method>
		<method name="slerp">
			<return type="Vector2">
			</return>
			<argument index="0" name="b" type="Vector2">
			</argument>
			<argument index="1" name="t" type="float">
			</argument>
			<description>
				Returns the result of SLERP between this vector and [code]b[/code], by amount [code]t[/code]. [code]t[/code] is in the range of [code]0.0 - 1.0[/code], representing the amount of interpolation.
				Both vectors need to be normalized.
			</description>
		</method>
		<method name="slide">
			<return type="Vector2">
			</return>
			<argument index="0" name="n" type="Vector2">
			</argument>
			<description>
				Returns the component of the vector along a plane defined by the given normal.
			</description>
		</method>
		<method name="snapped">
			<return type="Vector2">
			</return>
			<argument index="0" name="by" type="Vector2">
			</argument>
			<description>
				Returns the vector snapped to a grid with the given size.
			</description>
		</method>
		<method name="tangent">
			<return type="Vector2">
			</return>
			<description>
				Returns a perpendicular vector.
			</description>
		</method>
	</methods>
	<members>
		<member name="x" type="float" setter="" getter="">
			The vector's x component. Also accessible by using the index position [code][0][/code].
		</member>
		<member name="y" type="float" setter="" getter="">
			The vector's y component. Also accessible by using the index position [code][1][/code].
		</member>
	</members>
	<constants>
		<constant name="ZERO" value="Vector2( 0, 0 )">
			Zero vector.
		</constant>
		<constant name="ONE" value="Vector2( 1, 1 )">
			One vector.
		</constant>
		<constant name="INF" value="Vector2( inf, inf )">
			Infinite vector.
		</constant>
		<constant name="LEFT" value="Vector2( -1, 0 )">
			Left unit vector.
		</constant>
		<constant name="RIGHT" value="Vector2( 1, 0 )">
			Right unit vector.
		</constant>
		<constant name="UP" value="Vector2( 0, -1 )">
			Up unit vector.
		</constant>
		<constant name="DOWN" value="Vector2( 0, 1 )">
			Down unit vector.
		</constant>
	</constants>
</class>
