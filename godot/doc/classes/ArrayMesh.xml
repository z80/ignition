<?xml version="1.0" encoding="UTF-8" ?>
<class name="ArrayMesh" inherits="Mesh" category="Core" version="3.1.1">
	<brief_description>
	</brief_description>
	<description>
		The [code]ArrayMesh[/code] is used to construct a [Mesh] by specifying the attributes as arrays. The most basic example is the creation of a single triangle
		[codeblock]
		var vertices = PoolVector3Array()
		vertices.push_back(Vector3(0, 1, 0))
		vertices.push_back(Vector3(1, 0, 0))
		vertices.push_back(Vector3(0, 0, 1))
		# Initialize the ArrayMesh.
		var arr_mesh = ArrayMesh.new()
		var arrays = []
		arrays.resize(ArrayMesh.ARRAY_MAX)
		arrays[ArrayMesh.ARRAY_VERTEX] = vertices
		# Create the Mesh.
		arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
		var m = MeshInstance.new()
		m.mesh = arr_mesh
		[/codeblock]
		The [code]MeshInstance[/code] is ready to be added to the SceneTree to be shown.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_blend_shape">
			<return type="void">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_surface_from_arrays">
			<return type="void">
			</return>
			<argument index="0" name="primitive" type="int" enum="Mesh.PrimitiveType">
			</argument>
			<argument index="1" name="arrays" type="Array">
			</argument>
			<argument index="2" name="blend_shapes" type="Array" default="[  ]">
			</argument>
			<argument index="3" name="compress_flags" type="int" default="97280">
			</argument>
			<description>
				Creates a new surface.
				Surfaces are created to be rendered using a "primitive", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. See [Mesh] for details. (As a note, when using indices, it is recommended to only use points, lines or triangles). [method Mesh.get_surface_count] will become the [code]surf_idx[/code] for this new surface.
				The [code]arrays[/code] argument is an array of arrays. See [enum ArrayType] for the values used in this array. For example, [code]arrays[0][/code] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array or be empty, except for [code]ARRAY_INDEX[/code] if it is used.
				Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data, and the index array defines the order of the vertices.
				Godot uses clockwise winding order for front faces of triangle primitive modes.
			</description>
		</method>
		<method name="clear_blend_shapes">
			<return type="void">
			</return>
			<description>
				Remove all blend shapes from this [code]ArrayMesh[/code].
			</description>
		</method>
		<method name="get_blend_shape_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the number of blend shapes that the [code]ArrayMesh[/code] holds.
			</description>
		</method>
		<method name="get_blend_shape_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
				Returns the name of the blend shape at this index.
			</description>
		</method>
		<method name="lightmap_unwrap">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="transform" type="Transform">
			</argument>
			<argument index="1" name="texel_size" type="float">
			</argument>
			<description>
				Will perform a UV unwrap on the [code]ArrayMesh[/code] to prepare the mesh for lightmapping.
			</description>
		</method>
		<method name="regen_normalmaps">
			<return type="void">
			</return>
			<description>
				Will regenerate normal maps for the [code]ArrayMesh[/code].
			</description>
		</method>
		<method name="surface_find_by_name" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Return the index of the first surface with this name held within this [code]ArrayMesh[/code]. If none are found -1 is returned.
			</description>
		</method>
		<method name="surface_get_array_index_len" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
				Return the length in indices of the index array in the requested surface (see [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_get_array_len" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
				Return the length in vertices of the vertex array in the requested surface (see [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_get_format" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
				Return the format mask of the requested surface (see [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_get_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
				Get the name assigned to this surface.
			</description>
		</method>
		<method name="surface_get_primitive_type" qualifiers="const">
			<return type="int" enum="Mesh.PrimitiveType">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
				Return the primitive type of the requested surface (see [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_remove">
			<return type="void">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
				Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.
			</description>
		</method>
		<method name="surface_set_material">
			<return type="void">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<argument index="1" name="material" type="Material">
			</argument>
			<description>
				Set a [Material] for a given surface. Surface will be rendered using this material.
			</description>
		</method>
		<method name="surface_set_name">
			<return type="void">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
				Set a name for a given surface.
			</description>
		</method>
		<method name="surface_update_region">
			<return type="void">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<argument index="2" name="data" type="PoolByteArray">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="blend_shape_mode" type="int" setter="set_blend_shape_mode" getter="get_blend_shape_mode" enum="Mesh.BlendShapeMode">
		</member>
		<member name="custom_aabb" type="AABB" setter="set_custom_aabb" getter="get_custom_aabb">
			An overriding bounding box for this mesh.
		</member>
	</members>
	<constants>
		<constant name="NO_INDEX_ARRAY" value="-1">
			Default value used for index_array_len when no indices are present.
		</constant>
		<constant name="ARRAY_WEIGHTS_SIZE" value="4">
			Amount of weights/bone indices per vertex (always 4).
		</constant>
		<constant name="ARRAY_VERTEX" value="0" enum="ArrayType">
			Vertex array (array of [Vector3] vertices).
		</constant>
		<constant name="ARRAY_NORMAL" value="1" enum="ArrayType">
			Normal array (array of [Vector3] normals).
		</constant>
		<constant name="ARRAY_TANGENT" value="2" enum="ArrayType">
			Tangent array, array of groups of 4 floats. first 3 floats determine the tangent, and the last the binormal direction as -1 or 1.
		</constant>
		<constant name="ARRAY_COLOR" value="3" enum="ArrayType">
			Vertex array (array of [Color] colors).
		</constant>
		<constant name="ARRAY_TEX_UV" value="4" enum="ArrayType">
			UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v)).
		</constant>
		<constant name="ARRAY_TEX_UV2" value="5" enum="ArrayType">
			Second UV array (array of [Vector3] UVs or float array of groups of 2 floats (u,v)).
		</constant>
		<constant name="ARRAY_BONES" value="6" enum="ArrayType">
			Array of bone indices, as a float array. Each element in groups of 4 floats.
		</constant>
		<constant name="ARRAY_WEIGHTS" value="7" enum="ArrayType">
			Array of bone weights, as a float array. Each element in groups of 4 floats.
		</constant>
		<constant name="ARRAY_INDEX" value="8" enum="ArrayType">
			[Array] of integers used as indices referencing vertices, colors, normals, tangents, and textures. All of those arrays must have the same number of elements as the vertex array. No index can be beyond the vertex array size. When this index array is present, it puts the function into "index mode," where the index selects the *i*'th vertex, normal, tangent, color, UV, etc. This means if you want to have different normals or colors along an edge, you have to duplicate the vertices.
			For triangles, the index array is interpreted as triples, referring to the vertices of each triangle. For lines, the index array is in pairs indicating the start and end of each line.
		</constant>
		<constant name="ARRAY_MAX" value="9" enum="ArrayType">
		</constant>
		<constant name="ARRAY_FORMAT_VERTEX" value="1" enum="ArrayFormat">
			Array format will include vertices (mandatory).
		</constant>
		<constant name="ARRAY_FORMAT_NORMAL" value="2" enum="ArrayFormat">
			Array format will include normals
		</constant>
		<constant name="ARRAY_FORMAT_TANGENT" value="4" enum="ArrayFormat">
			Array format will include tangents
		</constant>
		<constant name="ARRAY_FORMAT_COLOR" value="8" enum="ArrayFormat">
			Array format will include a color array.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV" value="16" enum="ArrayFormat">
			Array format will include UVs.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV2" value="32" enum="ArrayFormat">
			Array format will include another set of UVs.
		</constant>
		<constant name="ARRAY_FORMAT_BONES" value="64" enum="ArrayFormat">
			Array format will include bone indices.
		</constant>
		<constant name="ARRAY_FORMAT_WEIGHTS" value="128" enum="ArrayFormat">
			Array format will include bone weights.
		</constant>
		<constant name="ARRAY_FORMAT_INDEX" value="256" enum="ArrayFormat">
			Index array will be used.
		</constant>
	</constants>
</class>
