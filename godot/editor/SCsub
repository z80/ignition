#!/usr/bin/env python

Import("env")

env.editor_sources = []

import os
import glob
from platform_methods import run_in_subprocess
from compat import open_utf8
import editor_builders


def _make_doc_data_class_path(to_path):
    # NOTE: It is safe to generate this file here, since this is still executed serially
    g = open_utf8(os.path.join(to_path, "doc_data_class_path.gen.h"), "w")
    g.write("static const int _doc_data_class_path_count = " + str(len(env.doc_class_path)) + ";\n")
    g.write("struct _DocDataClassPath { const char* name; const char* path; };\n")

    g.write("static const _DocDataClassPath _doc_data_class_paths[" + str(len(env.doc_class_path) + 1) + "] = {\n")
    for c in sorted(env.doc_class_path):
        g.write('\t{"' + c + '", "' + env.doc_class_path[c] + '"},\n')
    g.write("\t{NULL, NULL}\n")
    g.write("};\n")

    g.close()


if env["tools"]:
    # Register exporters
    reg_exporters_inc = '#include "register_exporters.h"\n'
    reg_exporters = "void register_exporters() {\n"
    for e in env.platform_exporters:
        # Glob all .cpp files in export folder
        files = Glob("#platform/" + e + "/export/" + "*.cpp")
        env.add_source_files(env.editor_sources, files)

        reg_exporters += "\tregister_" + e + "_exporter();\n"
        reg_exporters_inc += '#include "platform/' + e + '/export/export.h"\n'
    reg_exporters += "}\n"

    # NOTE: It is safe to generate this file here, since this is still executed serially
    with open_utf8("register_exporters.gen.cpp", "w") as f:
        f.write(reg_exporters_inc)
        f.write(reg_exporters)

    # Core API documentation.
    docs = []
    docs += Glob("#doc/classes/*.xml")

    # Module API documentation.
    module_dirs = []
    for d in env.doc_class_path.values():
        if d not in module_dirs:
            module_dirs.append(d)

    for d in module_dirs:
        if not os.path.isabs(d):
            docs += Glob("#" + d + "/*.xml")  # Built-in.
        else:
            docs += Glob(d + "/*.xml")  # Custom.

    _make_doc_data_class_path(env.Dir("#editor/doc").abspath)

    docs = sorted(docs)
    env.Depends("#editor/doc_data_compressed.gen.h", docs)
    env.CommandNoCache("#editor/doc_data_compressed.gen.h", docs, run_in_subprocess(editor_builders.make_doc_header))

    # Editor interface and class reference translations incur a significant size
    # cost for the editor binary (see godot-proposals#3421).
    # To limit it, we only include translations with a high enough completion
    # ratio (30% for the editor UI, 10% for the class reference).
    # Generated with `make include-list` for each resource.
    # Note: In 3.x, we also exclude languages that depend on complex text
    # layouts to be displayed properly: ar,bn,fa,he,hi,ml,si,ta,te,ur.

    # Editor translations
    to_include = (
        "bg,ca,cs,de,el,eo,es_AR,es,fi,fr,gl,hu,id,it,ja,ko,lv,ms,nb,nl,pl,pt_BR,pt,ro,ru,sk,sv,th,tr,uk,vi,zh_CN,zh_TW"
    ).split(",")
    tlist = [env.Dir("#editor/translations").abspath + "/" + f + ".po" for f in to_include]
    env.Depends("#editor/editor_translations.gen.h", tlist)
    env.CommandNoCache(
        "#editor/editor_translations.gen.h", tlist, run_in_subprocess(editor_builders.make_editor_translations_header)
    )

    # Documentation translations
    to_include = "de,es,fr,ja,zh_CN".split(",")
    tlist = [env.Dir("#doc/translations").abspath + "/" + f + ".po" for f in to_include]
    env.Depends("#editor/doc_translations.gen.h", tlist)
    env.CommandNoCache(
        "#editor/doc_translations.gen.h", tlist, run_in_subprocess(editor_builders.make_doc_translations_header)
    )

    # Fonts
    flist = glob.glob(env.Dir("#thirdparty").abspath + "/fonts/*.ttf")
    flist.extend(glob.glob(env.Dir("#thirdparty").abspath + "/fonts/*.otf"))
    flist.sort()
    env.Depends("#editor/builtin_fonts.gen.h", flist)
    env.CommandNoCache("#editor/builtin_fonts.gen.h", flist, run_in_subprocess(editor_builders.make_fonts_header))

    env.add_source_files(env.editor_sources, "*.cpp")
    env.add_source_files(env.editor_sources, "register_exporters.gen.cpp")

    SConscript("collada/SCsub")
    SConscript("doc/SCsub")
    SConscript("fileserver/SCsub")
    SConscript("icons/SCsub")
    SConscript("import/SCsub")
    SConscript("plugins/SCsub")

    lib = env.add_library("editor", env.editor_sources)
    env.Prepend(LIBS=[lib])
