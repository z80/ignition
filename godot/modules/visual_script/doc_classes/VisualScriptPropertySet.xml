<?xml version="1.0" encoding="UTF-8" ?>
<class name="VisualScriptPropertySet" inherits="VisualScriptNode" version="3.4">
	<brief_description>
		A Visual Script node that sets a property of an [Object].
	</brief_description>
	<description>
		[VisualScriptPropertySet] can set the value of any property from the current object or other objects.
	</description>
	<tutorials>
	</tutorials>
	<methods>
	</methods>
	<members>
		<member name="assign_op" type="int" setter="set_assign_op" getter="get_assign_op" enum="VisualScriptPropertySet.AssignOp" default="0">
			The additional operation to perform when assigning. See [enum AssignOp] for options.
		</member>
		<member name="base_script" type="String" setter="set_base_script" getter="get_base_script">
			The script to be used when [member set_mode] is set to [constant CALL_MODE_INSTANCE].
		</member>
		<member name="base_type" type="String" setter="set_base_type" getter="get_base_type" default="&quot;Object&quot;">
			The base type to be used when [member set_mode] is set to [constant CALL_MODE_INSTANCE].
		</member>
		<member name="basic_type" type="int" setter="set_basic_type" getter="get_basic_type" enum="Variant.Type">
			The type to be used when [member set_mode] is set to [constant CALL_MODE_BASIC_TYPE].
		</member>
		<member name="index" type="String" setter="set_index" getter="get_index">
			The indexed name of the property to set. See [method Object.set_indexed] for details.
		</member>
		<member name="node_path" type="NodePath" setter="set_base_path" getter="get_base_path">
			The node path to use when [member set_mode] is set to [constant CALL_MODE_NODE_PATH].
		</member>
		<member name="property" type="String" setter="set_property" getter="get_property" default="&quot;&quot;">
			The name of the property to set. Changing this will clear [member index].
		</member>
		<member name="set_mode" type="int" setter="set_call_mode" getter="get_call_mode" enum="VisualScriptPropertySet.CallMode" default="0">
			[code]set_mode[/code] determines the target object on which the property will be set. See [enum CallMode] for options.
		</member>
	</members>
	<constants>
		<constant name="CALL_MODE_SELF" value="0" enum="CallMode">
			The property will be set on this [Object].
		</constant>
		<constant name="CALL_MODE_NODE_PATH" value="1" enum="CallMode">
			The property will be set on the given [Node] in the scene tree.
		</constant>
		<constant name="CALL_MODE_INSTANCE" value="2" enum="CallMode">
			The property will be set on an instanced node with the given type and script.
		</constant>
		<constant name="CALL_MODE_BASIC_TYPE" value="3" enum="CallMode">
			The property will be set on a GDScript basic type (e.g. [Vector2]).
		</constant>
		<constant name="ASSIGN_OP_NONE" value="0" enum="AssignOp">
			The property will be assigned regularly.
		</constant>
		<constant name="ASSIGN_OP_ADD" value="1" enum="AssignOp">
			The value will be added to the property. Equivalent of doing [code]+=[/code].
		</constant>
		<constant name="ASSIGN_OP_SUB" value="2" enum="AssignOp">
			The value will be subtracted from the property. Equivalent of doing [code]-=[/code].
		</constant>
		<constant name="ASSIGN_OP_MUL" value="3" enum="AssignOp">
			The property will be multiplied by the value. Equivalent of doing [code]*=[/code].
		</constant>
		<constant name="ASSIGN_OP_DIV" value="4" enum="AssignOp">
			The property will be divided by the value. Equivalent of doing [code]/=[/code].
		</constant>
		<constant name="ASSIGN_OP_MOD" value="5" enum="AssignOp">
			A modulo operation will be performed on the property and the value. Equivalent of doing [code]%=[/code].
		</constant>
		<constant name="ASSIGN_OP_SHIFT_LEFT" value="6" enum="AssignOp">
			The property will be binarly shifted to the left by the given value. Equivalent of doing [code]&lt;&lt;[/code].
		</constant>
		<constant name="ASSIGN_OP_SHIFT_RIGHT" value="7" enum="AssignOp">
			The property will be binarly shifted to the right by the given value. Equivalent of doing [code]&gt;&gt;[/code].
		</constant>
		<constant name="ASSIGN_OP_BIT_AND" value="8" enum="AssignOp">
			A binary [code]AND[/code] operation will be performed on the property. Equivalent of doing [code]&amp;=[/code].
		</constant>
		<constant name="ASSIGN_OP_BIT_OR" value="9" enum="AssignOp">
			A binary [code]OR[/code] operation will be performed on the property. Equivalent of doing [code]|=[/code].
		</constant>
		<constant name="ASSIGN_OP_BIT_XOR" value="10" enum="AssignOp">
			A binary [code]XOR[/code] operation will be performed on the property. Equivalent of doing [code]^=[/code].
		</constant>
	</constants>
</class>
