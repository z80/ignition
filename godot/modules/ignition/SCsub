#!/usr/bin/env python

import sys

Import('env')

module_env = env.Clone()
module_env.Append(CXXFLAGS=['-std=c++11'])


# Build the plugin statically for more reliable builds
def configure_static_build():
    #module_env.Append(CCFLAGS=['-O2'])
    env.Append(CPPPATH=["src"])
    module_env.Append(CPPPATH=["#modules/ignition"])
    module_env.Append(CPPPATH=["#modules/ignition/src"])
    module_env.add_source_files( env.modules_sources, "src/*.cpp" )
    # To also add "register_types.h"
    module_env.add_source_files(env.modules_sources, "*.cpp")

    # Also sphere tools.
    module_env.Append(CPPPATH=["#modules/ignition/sphere"])
    module_env.add_source_files( env.modules_sources, "sphere/*.cpp" )
    module_env.add_source_files( env.modules_sources, "sphere/*.c" )

    # Also celestial motion tools.
    module_env.Append(CPPPATH=["#modules/ignition/celestial"])
    module_env.add_source_files( env.modules_sources, "celestial/*.cpp" )

    # Mesh octree, occupancy grid.
    module_env.Append(CPPPATH=["#modules/ignition/occupancy"])
    module_env.add_source_files( env.modules_sources, "occupancy/*.cpp" )

    # Also include universal utils.
    module_env.Append(CPPPATH=["#modules/ignition/utils"])
    module_env.add_source_files( env.modules_sources, "utils/*.cpp" )



configure_static_build()

#if ARGUMENTS.get('slicer_tests', 'no') == 'yes':
#    SConscript("tests/SCsub")




