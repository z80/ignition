<?xml version="1.0" encoding="UTF-8" ?>
<class name="GLTFState" inherits="Resource" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_used_extension">
			<return type="void" />
			<param index="0" name="extension_name" type="String" />
			<param index="1" name="required" type="bool" />
			<description>
				Appends an extension to the list of extensions used by this GLTF file during serialization. If [param required] is true, the extension will also be added to the list of required extensions. Do not run this in [method GLTFDocumentExtension._export_post], as that stage is too late to add extensions. The final list is sorted alphabetically.
			</description>
		</method>
		<method name="get_accessors">
			<return type="GLTFAccessor[]" />
			<description>
			</description>
		</method>
		<method name="get_additional_data">
			<return type="Variant" />
			<param index="0" name="extension_name" type="StringName" />
			<description>
				Gets additional arbitrary data in this [GLTFState] instance. This can be used to keep per-file state data in [GLTFDocumentExtension] classes, which is important because they are stateless.
				The argument should be the [GLTFDocumentExtension] name (does not have to match the extension name in the GLTF file), and the return value can be anything you set. If nothing was set, the return value is null.
			</description>
		</method>
		<method name="get_animation_player">
			<return type="AnimationPlayer" />
			<param index="0" name="idx" type="int" />
			<description>
			</description>
		</method>
		<method name="get_animation_players_count">
			<return type="int" />
			<param index="0" name="idx" type="int" />
			<description>
			</description>
		</method>
		<method name="get_animations">
			<return type="GLTFAnimation[]" />
			<description>
			</description>
		</method>
		<method name="get_buffer_views">
			<return type="GLTFBufferView[]" />
			<description>
			</description>
		</method>
		<method name="get_cameras">
			<return type="GLTFCamera[]" />
			<description>
			</description>
		</method>
		<method name="get_handle_binary_image">
			<return type="int" />
			<description>
			</description>
		</method>
		<method name="get_images">
			<return type="Texture2D[]" />
			<description>
			</description>
		</method>
		<method name="get_lights">
			<return type="GLTFLight[]" />
			<description>
			</description>
		</method>
		<method name="get_materials">
			<return type="Material[]" />
			<description>
			</description>
		</method>
		<method name="get_meshes">
			<return type="GLTFMesh[]" />
			<description>
			</description>
		</method>
		<method name="get_nodes">
			<return type="GLTFNode[]" />
			<description>
			</description>
		</method>
		<method name="get_scene_node">
			<return type="Node" />
			<param index="0" name="idx" type="int" />
			<description>
			</description>
		</method>
		<method name="get_skeletons">
			<return type="GLTFSkeleton[]" />
			<description>
			</description>
		</method>
		<method name="get_skins">
			<return type="GLTFSkin[]" />
			<description>
			</description>
		</method>
		<method name="get_texture_samplers">
			<return type="GLTFTextureSampler[]" />
			<description>
				Retrieves the array of texture samplers that are used by the textures contained in the GLTF.
			</description>
		</method>
		<method name="get_textures">
			<return type="GLTFTexture[]" />
			<description>
			</description>
		</method>
		<method name="get_unique_animation_names">
			<return type="String[]" />
			<description>
			</description>
		</method>
		<method name="get_unique_names">
			<return type="String[]" />
			<description>
			</description>
		</method>
		<method name="set_accessors">
			<return type="void" />
			<param index="0" name="accessors" type="GLTFAccessor[]" />
			<description>
			</description>
		</method>
		<method name="set_additional_data">
			<return type="void" />
			<param index="0" name="extension_name" type="StringName" />
			<param index="1" name="additional_data" type="Variant" />
			<description>
				Sets additional arbitrary data in this [GLTFState] instance. This can be used to keep per-file state data in [GLTFDocumentExtension] classes, which is important because they are stateless.
				The first argument should be the [GLTFDocumentExtension] name (does not have to match the extension name in the GLTF file), and the second argument can be anything you want.
			</description>
		</method>
		<method name="set_animations">
			<return type="void" />
			<param index="0" name="animations" type="GLTFAnimation[]" />
			<description>
			</description>
		</method>
		<method name="set_buffer_views">
			<return type="void" />
			<param index="0" name="buffer_views" type="GLTFBufferView[]" />
			<description>
			</description>
		</method>
		<method name="set_cameras">
			<return type="void" />
			<param index="0" name="cameras" type="GLTFCamera[]" />
			<description>
			</description>
		</method>
		<method name="set_handle_binary_image">
			<return type="void" />
			<param index="0" name="method" type="int" />
			<description>
			</description>
		</method>
		<method name="set_images">
			<return type="void" />
			<param index="0" name="images" type="Texture2D[]" />
			<description>
			</description>
		</method>
		<method name="set_lights">
			<return type="void" />
			<param index="0" name="lights" type="GLTFLight[]" />
			<description>
			</description>
		</method>
		<method name="set_materials">
			<return type="void" />
			<param index="0" name="materials" type="Material[]" />
			<description>
			</description>
		</method>
		<method name="set_meshes">
			<return type="void" />
			<param index="0" name="meshes" type="GLTFMesh[]" />
			<description>
			</description>
		</method>
		<method name="set_nodes">
			<return type="void" />
			<param index="0" name="nodes" type="GLTFNode[]" />
			<description>
			</description>
		</method>
		<method name="set_skeletons">
			<return type="void" />
			<param index="0" name="skeletons" type="GLTFSkeleton[]" />
			<description>
			</description>
		</method>
		<method name="set_skins">
			<return type="void" />
			<param index="0" name="skins" type="GLTFSkin[]" />
			<description>
			</description>
		</method>
		<method name="set_texture_samplers">
			<return type="void" />
			<param index="0" name="texture_samplers" type="GLTFTextureSampler[]" />
			<description>
				Sets the array of texture samplers that are used by the textures contained in the GLTF.
			</description>
		</method>
		<method name="set_textures">
			<return type="void" />
			<param index="0" name="textures" type="GLTFTexture[]" />
			<description>
			</description>
		</method>
		<method name="set_unique_animation_names">
			<return type="void" />
			<param index="0" name="unique_animation_names" type="String[]" />
			<description>
			</description>
		</method>
		<method name="set_unique_names">
			<return type="void" />
			<param index="0" name="unique_names" type="String[]" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="base_path" type="String" setter="set_base_path" getter="get_base_path" default="&quot;&quot;">
		</member>
		<member name="buffers" type="PackedByteArray[]" setter="set_buffers" getter="get_buffers" default="[]">
		</member>
		<member name="create_animations" type="bool" setter="set_create_animations" getter="get_create_animations" default="true">
		</member>
		<member name="glb_data" type="PackedByteArray" setter="set_glb_data" getter="get_glb_data" default="PackedByteArray()">
		</member>
		<member name="json" type="Dictionary" setter="set_json" getter="get_json" default="{}">
		</member>
		<member name="major_version" type="int" setter="set_major_version" getter="get_major_version" default="0">
		</member>
		<member name="minor_version" type="int" setter="set_minor_version" getter="get_minor_version" default="0">
		</member>
		<member name="root_nodes" type="PackedInt32Array" setter="set_root_nodes" getter="get_root_nodes" default="PackedInt32Array()">
		</member>
		<member name="scene_name" type="String" setter="set_scene_name" getter="get_scene_name" default="&quot;&quot;">
		</member>
		<member name="use_named_skin_binds" type="bool" setter="set_use_named_skin_binds" getter="get_use_named_skin_binds" default="false">
		</member>
	</members>
	<constants>
		<constant name="HANDLE_BINARY_DISCARD_TEXTURES" value="0">
			Discards all embedded textures and uses untextured materials.
		</constant>
		<constant name="HANDLE_BINARY_EXTRACT_TEXTURES" value="1">
			Extracts embedded textures to be reimported and compressed. Editor only. Acts as uncompressed at runtime.
		</constant>
		<constant name="HANDLE_BINARY_EMBED_AS_BASISU" value="2">
			Embeds textures VRAM compressed with Basis Universal into the generated scene.
		</constant>
		<constant name="HANDLE_BINARY_EMBED_AS_UNCOMPRESSED" value="3">
			Embeds textures compressed losslessly into the generated scene, matching old behavior.
		</constant>
	</constants>
</class>
