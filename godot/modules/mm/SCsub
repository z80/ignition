#!/usr/bin/env python

import sys

Import('env')

# The main source files of our Slicer plugin. We could also
# do a Glob to get cpp files automatically but for now we'll
# use an opt-in process just to have better control over what goes
# into the final binary during development. (Especially because we
# have some test files mucking things up)

# Linking the final Godot binaries can take a bit of time. Following advice
# from https://docs.godotengine.org/en/stable/development/cpp/custom_modules_in_cpp.html
# we instead put our main logic into a shared library (as this is more likely to require tweaking).
# This allows us to build the main binaries once and link them against quick to build artifacts dynamically
use_shared_libs = ARGUMENTS.get('slicer_shared', 'no') == 'yes'

module_env = env.Clone()
module_env.Append(CXXFLAGS=['-std=c++11'])

# Build the plugin statically for more reliable builds
def configure_static_build():
    #module_env.Append(CCFLAGS=['-O2'])
    module_env.Append(CPPPATH=["#modules/mm"])
    module_env.Append(CPPPATH=["#modules/mm/src"])
    module_env.add_source_files( env.modules_sources, "src/*.cpp" )

    if env['PLATFORM'] == 'win32':
        module_env.Append(CPPPATH=["#modules/mm/openvr/headers"])
        module_env.Append(CPPPATH=["#modules/mm/openvr/src"])
        module_env.Append(CPPPATH=["#modules/mm/openvr/src/vrcommon"])
        module_env.Append(CPPPATH=["#modules/mm/openvr_capture"])
        module_env.add_source_files( env.modules_sources, "openvr/src/*.cpp" )
        module_env.add_source_files( env.modules_sources, "openvr/src/vrcommon/*.cpp" )
        module_env.add_source_files( env.modules_sources, "openvr_capture/*.cpp" )
        module_env.Append(CPPDEFINES=['OPENVR_BUILD_STATIC'])
        module_env.Append(CPPDEFINES=['VR_API_PUBLIC'])

    # To also add "register_types.h"
    module_env.add_source_files(env.modules_sources, "*.cpp")


    #dict = env.Dictionary()
    #keys = dict.keys()
    #arch = "TARGET_ARCH"
    #if arch in keys:
    #    print( "TARGET_ARCH: ", dict[arch] )
    #else:
    #    print( "TARGET_ARCH doesn\'t seem to be defined" )
    #print( "all keys: ", keys )
    #for key in keys:
    #    print( "key: ", key, ", value: ", dict[key], ", type: ", type( dict[key] ) )
    #env.Append(CPPDEFINES=['OPENVR_BUILD_STATIC'])
    #env.Append(CPPDEFINES=['VR_API_PUBLIC'])

    # Getting if the build is for 32 or 64 bit. (TARGET_ARCH is always amd64 regardless of number of bits).
    dict = env.Dictionary()
    keys = dict.keys()
    BITS = 'bits'
    if BITS in keys:
        val = dict[BITS]
        if val != '32':
            # This is needed for OpenVR for picking up the right 
            # dll. The dilema is either vrclient.dll or vrcliend_64.dll.
            module_env.Append(CPPDEFINES=['WIN64'])
 
     


configure_static_build()

#if ARGUMENTS.get('mm_tests', 'no') == 'yes':
#    SConscript("tests/SCsub")





