<?xml version="1.0" encoding="UTF-8" ?>
<class name="CSGShape" inherits="VisualInstance" category="Core" version="3.1.2">
	<brief_description>
		The CSG base class.
	</brief_description>
	<description>
		This is the CSG base class that provides CSG operation support to the various CSG nodes in Godot.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_collision_layer_bit" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="bit" type="int">
			</argument>
			<description>
				Returns an individual bit on the collision mask.
			</description>
		</method>
		<method name="get_collision_mask_bit" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="bit" type="int">
			</argument>
			<description>
				Returns an individual bit on the collision mask.
			</description>
		</method>
		<method name="get_meshes" qualifiers="const">
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
		<method name="is_root_shape" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if this is a root shape and is thus the object that is rendered.
			</description>
		</method>
		<method name="set_collision_layer_bit">
			<return type="void">
			</return>
			<argument index="0" name="bit" type="int">
			</argument>
			<argument index="1" name="value" type="bool">
			</argument>
			<description>
				Sets individual bits on the layer mask. Use this if you only need to change one layer's value.
			</description>
		</method>
		<method name="set_collision_mask_bit">
			<return type="void">
			</return>
			<argument index="0" name="bit" type="int">
			</argument>
			<argument index="1" name="value" type="bool">
			</argument>
			<description>
				Sets individual bits on the collision mask. Use this if you only need to change one layer's value.
			</description>
		</method>
	</methods>
	<members>
		<member name="calculate_tangents" type="bool" setter="set_calculate_tangents" getter="is_calculating_tangents">
			Calculate tangents for the CSG shape which allows the use of normal maps. This is only applied on the root shape, this setting is ignored on any child.
		</member>
		<member name="collision_layer" type="int" setter="set_collision_layer" getter="get_collision_layer">
			The physics layers this area is in.
			Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.
			A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.
		</member>
		<member name="collision_mask" type="int" setter="set_collision_mask" getter="get_collision_mask">
			The physics layers this CSG shape scans for collisions.
		</member>
		<member name="operation" type="int" setter="set_operation" getter="get_operation" enum="CSGShape.Operation">
			The operation that is performed on this shape. This is ignored for the first CSG child node as the operation is between this node and the previous child of this nodes parent.
		</member>
		<member name="snap" type="float" setter="set_snap" getter="get_snap">
		</member>
		<member name="use_collision" type="bool" setter="set_use_collision" getter="is_using_collision">
			Adds a collision shape to the physics engine for our CSG shape. This will always act like a static body. Note that the collision shape is still active even if the CSG shape itself is hidden.
		</member>
	</members>
	<constants>
		<constant name="OPERATION_UNION" value="0" enum="Operation">
			Geometry of both primitives is merged, intersecting geometry is removed.
		</constant>
		<constant name="OPERATION_INTERSECTION" value="1" enum="Operation">
			Only intersecting geometry remains, the rest is removed.
		</constant>
		<constant name="OPERATION_SUBTRACTION" value="2" enum="Operation">
			The second shape is subtracted from the first, leaving a dent with its shape.
		</constant>
	</constants>
</class>
