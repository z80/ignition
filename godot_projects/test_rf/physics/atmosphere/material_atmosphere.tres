[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode unshaded;

// Light parameters
uniform vec4  light_color: hint_color = vec4( 1.0, 0.988, 0.871, 1.0 );
uniform vec3  light_dir     = vec3(1.0, -0.5, 0.0);
uniform float light_size    = 0.05;
uniform float glow_size     = 0.1;
// Ray geometry.
uniform float ray_scale     = 6.0;
uniform float ray_size      = 0.7;
uniform float ray_bias      = 0.3;
// Noise for rays generation.
uniform sampler2D ray_noise;



vec4 sun_color( in vec3 ray_local, in vec3 light_dir_local )
{
	// First check if it is the same direction to reject sun behind.
	if (light_dir_local.z < 0.0)
		return vec4( light_color.xyz, 0.0 );
	float dist = length( ray_local.xy - light_dir_local.xy );
	float light_and_glow = light_size + glow_size;
	if (dist > light_and_glow)
		return vec4( light_color.xyz, 0.0 );
	if ( dist <= light_size )
		return light_color;
	
	// Ramp transparency.
	// (x-1)/(deviation_sine-light_size) = (0-1)/(light_and_glow - light_size)
	// x = 1 - (deviation_sine-light_size)/(light_and_glow-light_size)
	float alpha = pow(1.0 - (dist-light_size)/(light_and_glow-light_size), 5.0 );
	
	//alpha *= 0.0;
	return vec4(light_color.xyz, alpha);
}

vec4 rays_color( in vec3 view_local, in vec3 light_dir_local )
{
	if (light_dir_local.z < 0.0)
		return vec4( light_color.xyz, 0.0 );

	// Draw center.
	/*{
		float view_to_center_len = length(view_local.xy);
		if ( view_to_center_len < 0.02 )
			return vec4( 0.0, 0.5, 0.0, 1.0);
	}
	// Draw line to screen center.
	{
		vec2 light = light_dir_local.xy;
		vec2 view  = view_local.xy;
		float light_len = length( light );
		if ( light_len < 0.001 )
			return vec4( 0.0 );
		float dist = abs(light.x*view.y - light.y*view.x);
		if ( dist < 0.002 )
			return light_color;
	}*/
	
	vec2 view_rel = view_local.xy - light_dir_local.xy;
	float view_len = length( view_rel );
	if ( view_len < 0.001 )
		return vec4( 0.0 );
	view_rel = view_rel * (light_size / view_len);
	vec2 sun_edge = light_dir_local.xy + view_rel;
	// Distance of this sun edge to the center of screen.
	float sun_edge_len = length( sun_edge );
	
	
	
	vec2  edge_to_view = view_local.xy - sun_edge;
	float edge_to_view_len = length(edge_to_view);
	float arg = atan( view_rel.y, view_rel.x );
	float ray_length = ray_size * ( 1.0 - clamp( sun_edge_len/(light_size*ray_scale) - ray_bias, 0.0, 1.0 ) );
	float alpha;
	if ( view_len < light_size )
		alpha = 1.0;
	else
		alpha = pow( clamp( 1.0 - edge_to_view_len / ray_length, 0.0, 1.0 ), 5.0 );
	float t = texture( ray_noise, vec2( arg, 0.5 ) ).r;
	float tex_th = 0.0;
	t = clamp( t-tex_th, 0.0, 1.0 )  * (1.0 - tex_th);
	alpha = alpha * pow(t, 5.0);
	return vec4( light_color.xyz, alpha );
}


void vertex()
{
}

void fragment()
{
	vec3 ray = -(CAMERA_MATRIX * vec4(VIEW, 0.0)).xyz;
	ray = ray / length(ray);
	
	vec3 sun_dir_local = -(INV_CAMERA_MATRIX * vec4(light_dir, 0.0)).xyz;
	
	vec4 c = sun_color( VIEW, sun_dir_local );
	vec4 rc = rays_color( VIEW, sun_dir_local );

	c.rgb = mix( c.rgb, rc.rgb, rc.a );
	c.a = max(c.a, rc.a);
	ALBEDO = c.rgb;
	ALPHA  = c.a;
}
"

[sub_resource type="OpenSimplexNoise" id=2]
period = 51.3

[sub_resource type="NoiseTexture" id=3]
height = 1
seamless = true
noise = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
render_priority = 1
shader = SubResource( 1 )
shader_param/light_color = Color( 1, 0.988, 0.871, 1 )
shader_param/light_dir = Vector3( 1, 0, 0 )
shader_param/light_size = 0.05
shader_param/glow_size = 0.2
shader_param/ray_scale = 10.0
shader_param/ray_size = 1.0
shader_param/ray_bias = 0.1
shader_param/ray_noise = SubResource( 3 )

[sub_resource type="Shader" id=5]
code = "shader_type spatial;
render_mode unshaded;

// Atmosphere parameters
uniform vec4  atmosphere_color_day:     hint_color = vec4( 0.3, 0.3, 0.7, 1.0 );
uniform vec4  atmosphere_color_evening: hint_color = vec4( 0.7, 0.3, 0.3, 1.0 );
uniform vec3  sphere_position = vec3(0.0, 0.0, 0.0);
uniform float sphere_radius = 50.0;
uniform float atmosphere_height    = 2.0;
uniform float opaque_height        = 1.0;
uniform float transparency_scale_outer = 30.0;
uniform float transparency_scale_inner = 0.5;
uniform vec3  light_dir     = vec3(1.0, 0.0, 0.0);
uniform float displacement: hint_range(-1.0, 1.0);

varying vec3 cam_position;

bool ray_atmosphere_intersection_length( vec3 ray_origin, vec3 sphere_center, vec3 ray, out float len, out bool inside, out float day_evening )
{
	vec3 sphere_rel = sphere_center - ray_origin;
	// Find the closest point.
	float t = dot( sphere_rel, ray );
	vec3 v = ray*t - sphere_rel;
	// Distance from the closest point to the sphere center should be 
	// smaller than radius.
	float d = length(v);
	// Atmosphere radius.
	float R = sphere_radius + atmosphere_height;
	if ( d > R )
	{
		len    = 0.0;
		inside = false;
		return false;
	}
	
	// Compute using Phifagorous theorem.
	float x = sqrt( R*R - d*d );
	float t2 = t + x;
	float t1_candidate = t - x;
	inside = ( t1_candidate < 0.0 );
	float t1;
	if (inside)
		t1 = 0.0;
	else
		t1 = t1_candidate;

	// Intersects surface?
	bool intersects_surface = (d < sphere_radius);
	// If intersects surface, need to crop the distance 
	// to the surface intersection.
	x = sqrt( sphere_radius*sphere_radius - d*d );
	float surf_t1 = t - x;
	// If surface is on the way.
	/*if ( surf_t1 > 0.0 )
	{
		// If inside atmosphere, make it transparent, i.e. no distance fog.
		// No, make it totally opaque.
		if ( !inside )
			// Should make it fully transparent outside.
			t2 = t1; //surf_t1;
	}*/
	
	len = t2 - t1;
	
	// Additional reduction of effective length depending on how high ray goes.
	float opaque_r = sphere_radius + opaque_height;
	if ( d > opaque_r )
	{
		float height = (d - opaque_r)/(atmosphere_height - opaque_height);
		len *= (1.0 - height);
	}
	
	// Also redusing by means of sun light direction.
	v = ray*t1 + ray_origin;
	vec3 at = v / length( v );
	d = clamp( dot( at,light_dir ) + displacement, 0.0, 1.0 );
	day_evening = d;
	len *= d;
	
	return true;
}

float ramp_transparency_length( vec3 ray_origin, vec3 sphere_center )
{
	float d = length(ray_origin - sphere_center);
	float R = sphere_radius + atmosphere_height;
	float r = sphere_radius + opaque_height;
	if ( d > R )
		return transparency_scale_outer;
	else if (d < r)
		return transparency_scale_inner;
	
	float alpha = (d - r) / (R - r);
	float t = transparency_scale_outer * alpha + transparency_scale_inner * (1.0 - alpha);
	
	return t;
}

vec4 compute_atmosphere_color( vec3 ray_origin, vec3 sphere_center, vec3 ray )
{
	float through_length;
	bool  inside;
	float dot_;
	bool intersects = ray_atmosphere_intersection_length( ray_origin, sphere_center, ray, through_length, inside, dot_ );
	if ( !intersects )
	{
		vec4 c = vec4( atmosphere_color_day.xyz, 0.0 );
		return c;
	}
	
	float transparency_scale = ramp_transparency_length( ray_origin, sphere_center );
	float alpha = clamp( through_length / transparency_scale, 0.0, 1.0 );
	
	float k_day = dot_;
	float k_evening = 1.0 - dot_;
	vec4 color = atmosphere_color_day*k_day  + atmosphere_color_evening*k_evening;
	vec4 c = vec4( color.xyz, alpha );
	return c;
}

vec4 sun_color( vec3 ray_origin, vec3 sphere_center, vec3 ray )
{
	vec3 deviation_vec = cross( ray, light_dir );
	float deviation_sine = length( deviation_vec );
	const vec3 sun_color = vec3( 0.8, 0.8, 0.8 );
	const float sun_size = 0.1;
	
	return vec4( 0.0 );
}


void vertex()
{
	//sphere_position = (WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0) ).xyz;
	cam_position = (CAMERA_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
}

void fragment()
{
	vec3 ray = -(CAMERA_MATRIX * vec4(VIEW, 0.0)).xyz;
	ray = ray / length(ray);
	
	//bool ok = ray_intersects_sphere( cam_position, sphere_position, ray, sphere_radius );
	
	//float len = 0.0;
	//bool inside = false;
	//bool ok2 = ray_sphere_intersection_length( cam_position, sphere_position, ray, sphere_radius, len, inside );
	
	//bool ok3 = ray_atmosphere_intersection_length( cam_position, sphere_position, ray, sphere_radius, atmosphere_height, len, inside );
	
	//ALBEDO.r = len / sphere_radius/2.0;
	//ALBEDO.g = 0.0;
	//ALBEDO.b = 0.0;
	//ALPHA = len / sphere_radius/2.0;
	
	vec4 c = compute_atmosphere_color( cam_position, sphere_position, ray );
	ALBEDO = c.rgb;
	ALPHA  = c.a;
}
"

[resource]
next_pass = SubResource( 4 )
shader = SubResource( 5 )
shader_param/atmosphere_color_day = Color( 0.470588, 0.560784, 0.611765, 1 )
shader_param/atmosphere_color_evening = Color( 0.607843, 0.227451, 0.227451, 1 )
shader_param/sphere_position = Vector3( 0, 0, 0 )
shader_param/sphere_radius = 50.0
shader_param/atmosphere_height = 2.0
shader_param/opaque_height = 1.0
shader_param/transparency_scale_outer = 30.0
shader_param/transparency_scale_inner = 0.5
shader_param/light_dir = Vector3( 1, 0, 0 )
shader_param/displacement = 0.34
