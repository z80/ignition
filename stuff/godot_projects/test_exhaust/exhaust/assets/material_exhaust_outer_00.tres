[gd_resource type="ShaderMaterial" load_steps=8 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode unshaded;

const float SIZE_Y = 25.0;

uniform float pressure;
uniform float power;
uniform float exhaust_speed;
uniform float texture_scale;
uniform sampler2D noise;
uniform sampler2D displacement_x;
uniform sampler2D displacement_z;

uniform vec4 color_bright: hint_color = vec4( 0.6471, 0.8039, 1.0, 1.0 );
uniform vec4 color_dark:   hint_color = vec4( 0.3529, 0.3529, 0.3529, 1.0 );

varying float time;
varying vec3 point3d;
varying vec3 normal3d;



float scale( float z, float p )
{
	float u = abs(z)/SIZE_Y;
	u = sqrt( u );
	float s = 1.0 + (u)*SIZE_Y*p;
	return s;
}

vec3 compute_color( sampler2D tex, float tex_scale, float t, float v, vec3 r, vec3 n )
{
	float y = r.y + v * t;
	y = mod( y/SIZE_Y, 1.0 );
	vec2 uv = vec2( r.x*tex_scale, y*tex_scale );
	vec4 c_xy = texture( tex, uv );
	uv = vec2( r.x*tex_scale, r.z*tex_scale );
	vec4 c_xz = texture( tex, uv );
	uv = vec2( y*tex_scale, r.z*tex_scale );
	vec4 c_yz = texture( tex, uv );
	vec3 an = abs(n);
	vec4 c = c_xy*an.z + c_xz*an.y + c_yz*an.x;
	float coef = (c.x + c.y + c.z) / 3.0;
	vec3 color = color_bright.rgb * coef + color_dark.rgb * (1.0-coef);
	//float a = texture( noise, vec2(r.x*tex_scale, y*tex_scale) ).g;
	//vec3 color = vec3(a, a, a);
	return color;
}

vec2 compute_displacement( float t, float v, vec3 r, vec3 n )
{
	float gain = abs(r.y/SIZE_Y) * 5.0;
	float y = r.y + v * t;
	y = mod( y/SIZE_Y, 1.0 );

	vec2 uv = vec2( r.x, y );
	float dx = texture( displacement_x, uv ).r - 0.5;

	uv = vec2( r.z, y );
	float dz = texture( displacement_z, uv ).r - 0.5;
	
	dx *= gain;
	dz *= gain;
	return vec2( dx, dz );
}

float compute_alpha( float pwr, vec3 r )
{
	float at = pwr;
	float y = at - abs(r.y/SIZE_Y);
	float a = y / (1.0 + abs(y)) ;
	
	if (a < 0.0)
		a = 0.0;
	
	return a;
}

void vertex()
{
	time = TIME;
	point3d = VERTEX;
	normal3d = NORMAL;
	
	vec2 d = compute_displacement( time, exhaust_speed, point3d, normal3d );
	float x = VERTEX.x + d.x;
	float z = VERTEX.z + d.y;
	VERTEX.x = x;
	VERTEX.z = z;
}

void fragment() {
	ALBEDO = compute_color( noise, texture_scale, time, exhaust_speed, point3d, normal3d );
	ALPHA  = compute_alpha( power, point3d );
}
"

[sub_resource type="OpenSimplexNoise" id=2]
seed = 1
period = 15.0

[sub_resource type="NoiseTexture" id=3]
width = 128
height = 128
seamless = true
noise = SubResource( 2 )

[sub_resource type="OpenSimplexNoise" id=4]
seed = 2
period = 15.0

[sub_resource type="NoiseTexture" id=5]
width = 128
height = 128
seamless = true
noise = SubResource( 4 )

[sub_resource type="OpenSimplexNoise" id=6]
period = 15.0

[sub_resource type="NoiseTexture" id=7]
width = 128
height = 128
seamless = true
noise = SubResource( 6 )

[resource]
shader = SubResource( 1 )
shader_param/pressure = 0.5
shader_param/power = 0.8
shader_param/exhaust_speed = 150.0
shader_param/texture_scale = 0.2
shader_param/color_bright = Color( 0.6471, 0.8039, 1, 1 )
shader_param/color_dark = Color( 0.3529, 0.3529, 0.3529, 1 )
shader_param/noise = SubResource( 7 )
shader_param/displacement_x = SubResource( 3 )
shader_param/displacement_z = SubResource( 5 )
